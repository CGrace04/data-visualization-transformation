{
  "hash": "f5ff1777902f072c5075a627baeb2468",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Flights and pipes (Complete)\"\n---\n\n\n\n\n# Introduction\n\nHave you ever had a flight delayed?\nHow common is that?\nWhich airlines are delayed more than others?\n\n## Packages\n\nWe will use the **tidyverse** packages for data wrangling and visualization and the **nycflights13** package for the data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n:::\n\n\n\n\n## Data\n\nThe dataset we will explore is called `flights`.\nLet's `glimpse()` at it.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n```\n\n\n:::\n:::\n\n\n\n\n# Exploring flights\n\n## Exercise 1\n\nFill in the blanks:\n\nThe `flights` data frame has 336776 rows.\nEach row represents a flight out of one of three NYC airports in 2013.\n\n## Exercise 2\n\nWhat are the names of the variables in `flights`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"year\"           \"month\"          \"day\"            \"dep_time\"      \n [5] \"sched_dep_time\" \"dep_delay\"      \"arr_time\"       \"sched_arr_time\"\n [9] \"arr_delay\"      \"carrier\"        \"flight\"         \"tailnum\"       \n[13] \"origin\"         \"dest\"           \"air_time\"       \"distance\"      \n[17] \"hour\"           \"minute\"         \"time_hour\"     \n```\n\n\n:::\n:::\n\n\n\n\n## Exercise 3 - `select()`\n\n-   Make a data frame that only contains the variables `dep_delay` and `arr_delay`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(dep_delay, arr_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 2\n   dep_delay arr_delay\n       <dbl>     <dbl>\n 1         2        11\n 2         4        20\n 3         2        33\n 4        -1       -18\n 5        -6       -25\n 6        -4        12\n 7        -5        19\n 8        -3       -14\n 9        -3        -8\n10        -2         8\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n-   Make a data frame that keeps every variable except `dep_delay`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(!dep_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 18\n    year month   day dep_time sched_dep_time arr_time sched_arr_time arr_delay\n   <int> <int> <int>    <int>          <int>    <int>          <int>     <dbl>\n 1  2013     1     1      517            515      830            819        11\n 2  2013     1     1      533            529      850            830        20\n 3  2013     1     1      542            540      923            850        33\n 4  2013     1     1      544            545     1004           1022       -18\n 5  2013     1     1      554            600      812            837       -25\n 6  2013     1     1      554            558      740            728        12\n 7  2013     1     1      555            600      913            854        19\n 8  2013     1     1      557            600      709            723       -14\n 9  2013     1     1      557            600      838            846        -8\n10  2013     1     1      558            600      753            745         8\n# ℹ 336,766 more rows\n# ℹ 10 more variables: carrier <chr>, flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n-   Make a data frame that includes all variables between `year` through `dep_delay` (inclusive). These are all variables that provide information about the departure of each flight.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(year:dep_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 6\n    year month   day dep_time sched_dep_time dep_delay\n   <int> <int> <int>    <int>          <int>     <dbl>\n 1  2013     1     1      517            515         2\n 2  2013     1     1      533            529         4\n 3  2013     1     1      542            540         2\n 4  2013     1     1      544            545        -1\n 5  2013     1     1      554            600        -6\n 6  2013     1     1      554            558        -4\n 7  2013     1     1      555            600        -5\n 8  2013     1     1      557            600        -3\n 9  2013     1     1      557            600        -3\n10  2013     1     1      558            600        -2\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n-   Use the `select` helper `contains()` to make a data frame that includes the variables associated with the arrival, i.e., contains the string `\"arr_\"` in the name.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(contains(\"arr_\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 3\n   arr_time sched_arr_time arr_delay\n      <int>          <int>     <dbl>\n 1      830            819        11\n 2      850            830        20\n 3      923            850        33\n 4     1004           1022       -18\n 5      812            837       -25\n 6      740            728        12\n 7      913            854        19\n 8      709            723       -14\n 9      838            846        -8\n10      753            745         8\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Exercise 4 - `slice()`\n\n-   Display the first five rows of the `flights` data frame.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n-   Display the last two rows of the `flights` data frame.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  slice_tail(n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n1  2013     9    30       NA           1159        NA       NA           1344\n2  2013     9    30       NA            840        NA       NA           1020\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n## Exercise 5 - `arrange()`\n\n-   Let's arrange the data by departure delay, so the flights with the shortest departure delays will be at the top of the data frame.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  arrange(dep_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013    12     7     2040           2123       -43       40           2352\n 2  2013     2     3     2022           2055       -33     2240           2338\n 3  2013    11    10     1408           1440       -32     1549           1559\n 4  2013     1    11     1900           1930       -30     2233           2243\n 5  2013     1    29     1703           1730       -27     1947           1957\n 6  2013     8     9      729            755       -26     1002            955\n 7  2013    10    23     1907           1932       -25     2143           2143\n 8  2013     3    30     2030           2055       -25     2213           2250\n 9  2013     3     2     1431           1455       -24     1601           1631\n10  2013     5     5      934            958       -24     1225           1309\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n-   What does it mean for the `dep_delay` to have a negative value?\n\nFlight took off 43 minutes earlier than it was scheduled.\n\n-   Arrange the data by descending departure delay, so the flights with the longest departure delays will be at the top.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  arrange(desc(dep_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n-   Create a data frame that only includes the plane tail number (`tailnum`), carrier (`carrier`), and departure delay for the flight with the longest departure delay. What is the plane tail number (`tailnum`) for this flight?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  arrange(desc(dep_delay)) |>\n  slice_head(n = 1) |>\n  select(tailnum, carrier, dep_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  tailnum carrier dep_delay\n  <chr>   <chr>       <dbl>\n1 N384HA  HA           1301\n```\n\n\n:::\n:::\n\n\n\n\n## Exercise 6 - `filter()`\n\n-   Filter for all rows where the destination airport is RDU.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(dest == \"RDU\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8,163 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      800            810       -10      949            955\n 2  2013     1     1      832            840        -8     1006           1030\n 3  2013     1     1      851            851         0     1032           1036\n 4  2013     1     1      917            920        -3     1052           1108\n 5  2013     1     1     1024           1030        -6     1204           1215\n 6  2013     1     1     1127           1129        -2     1303           1309\n 7  2013     1     1     1157           1205        -8     1342           1345\n 8  2013     1     1     1240           1235         5     1415           1415\n 9  2013     1     1     1317           1325        -8     1454           1505\n10  2013     1     1     1449           1450        -1     1651           1640\n# ℹ 8,153 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n-   Filter for all rows where the destination airport is RDU and the arrival delay is less than 0.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(dest == \"RDU\" & arr_delay < 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4,232 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      800            810       -10      949            955\n 2  2013     1     1      832            840        -8     1006           1030\n 3  2013     1     1      851            851         0     1032           1036\n 4  2013     1     1      917            920        -3     1052           1108\n 5  2013     1     1     1024           1030        -6     1204           1215\n 6  2013     1     1     1127           1129        -2     1303           1309\n 7  2013     1     1     1157           1205        -8     1342           1345\n 8  2013     1     1     1317           1325        -8     1454           1505\n 9  2013     1     1     1505           1510        -5     1654           1655\n10  2013     1     1     1800           1800         0     1945           1951\n# ℹ 4,222 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n-   Describe what the code is doing in words.\n\nStart with the flights data frame, and then filter for rows where destination is RDU or GSO and arrival delay or departure delay is less than 0.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(\n    dest %in% c(\"RDU\", \"GSO\"),\n    arr_delay < 0 | dep_delay < 0\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6,203 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      800            810       -10      949            955\n 2  2013     1     1      832            840        -8     1006           1030\n 3  2013     1     1      851            851         0     1032           1036\n 4  2013     1     1      917            920        -3     1052           1108\n 5  2013     1     1     1024           1030        -6     1204           1215\n 6  2013     1     1     1127           1129        -2     1303           1309\n 7  2013     1     1     1157           1205        -8     1342           1345\n 8  2013     1     1     1317           1325        -8     1454           1505\n 9  2013     1     1     1449           1450        -1     1651           1640\n10  2013     1     1     1505           1510        -5     1654           1655\n# ℹ 6,193 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n**Hint:** Logical operators in R:\n\n| operator      | definition                                               |\n|:--------------|:---------------------------------------------------------|\n| `<`           | is less than?                                            |\n| `<=`          | is less than or equal to?                                |\n| `>`           | is greater than?                                         |\n| `>=`          | is greater than or equal to?                             |\n| `==`          | is exactly equal to?                                     |\n| `!=`          | is not equal to?                                         |\n| `x & y`       | is x AND y?                                              |\n| `x | y`       | is x OR y?                                               |\n| `is.na(x)`    | is x NA?                                                 |\n| `!is.na(x)`   | is x not NA?                                             |\n| `x %in% y`    | is x in y?                                               |\n| `!(x %in% y)` | is x not in y?                                           |\n| `!x`          | is not x? (only makes sense if `x` is `TRUE` or `FALSE`) |\n\n## Exercise 7 - `count()`\n\n-   Create a frequency table of the destination locations for flights from New York.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  count(dest, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 105 × 2\n   dest      n\n   <chr> <int>\n 1 ORD   17283\n 2 ATL   17215\n 3 LAX   16174\n 4 BOS   15508\n 5 MCO   14082\n 6 CLT   14064\n 7 SFO   13331\n 8 FLL   12055\n 9 MIA   11728\n10 DCA    9705\n# ℹ 95 more rows\n```\n\n\n:::\n:::\n\n\n\n\n-   In which month was there the fewest number of flights? How many flights were there in that month?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  count(month) |>\n  arrange(n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n   month     n\n   <int> <int>\n 1     2 24951\n 2     1 27004\n 3    11 27268\n 4     9 27574\n 5    12 28135\n 6     6 28243\n 7     4 28330\n 8     5 28796\n 9     3 28834\n10    10 28889\n11     8 29327\n12     7 29425\n```\n\n\n:::\n:::\n\n\n\n\n-   On which date (month + day) was there the largest number of flights? How many flights were there on that day?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  count(month, day, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 365 × 3\n   month   day     n\n   <int> <int> <int>\n 1    11    27  1014\n 2     7    11  1006\n 3     7     8  1004\n 4     7    10  1004\n 5    12     2  1004\n 6     7    18  1003\n 7     7    25  1003\n 8     7    12  1002\n 9     7     9  1001\n10     7    17  1001\n# ℹ 355 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Exercise 8 - `mutate()`\n\n-   Convert `air_time` (minutes in the air) to hours and then create a new variable, `mph`, the miles per hour of the flight.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  mutate(\n    air_time_hr = air_time / 60,\n    mph = distance / air_time_hr\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 21\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 13 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>, air_time_hr <dbl>, mph <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n-   First, count the number of flights each month, and then calculate the proportion of flights in each month. What proportion of flights take place in July?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  count(month) |>\n  mutate(prop = n / sum(n)) |>\n  filter(month == 7)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  month     n   prop\n  <int> <int>  <dbl>\n1     7 29425 0.0874\n```\n\n\n:::\n:::\n\n\n\n\n## Exercise 9 - `summarize()`\n\n-   Find mean arrival delay for all flights.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  mean_arr_delay\n           <dbl>\n1           6.90\n```\n\n\n:::\n:::\n\n\n\n\n## Exercise 10 - `group_by()`\n\n-   Find mean arrival delay for for each month.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  group_by(month) |>\n  summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n   month mean_arr_delay\n   <int>          <dbl>\n 1     1          6.13 \n 2     2          5.61 \n 3     3          5.81 \n 4     4         11.2  \n 5     5          3.52 \n 6     6         16.5  \n 7     7         16.7  \n 8     8          6.04 \n 9     9         -4.02 \n10    10         -0.167\n11    11          0.461\n12    12         14.9  \n```\n\n\n:::\n:::\n\n\n\n\n-   What is the median departure delay for each airports around NYC (`origin`)? Which airport has the shortest median departure delay?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  group_by(origin) |>\n  summarize(median_dep_delay = median(dep_delay, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  origin median_dep_delay\n  <chr>             <dbl>\n1 EWR                  -1\n2 JFK                  -1\n3 LGA                  -3\n```\n\n\n:::\n:::\n",
    "supporting": [
      "3-1-flights-and-pipes-eov_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}