{
  "hash": "0f710d3ba637f88c6fc9bf1208c19c3f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing Iris Flowers\"\nsubtitle: \"Module 2 - Ex 1\"\nauthor: \"\"\ntoc: true\nfilters: \n  - webr\nwebr:\n  packages: ['tidyverse', 'scales']\nbibliography: iris-ref.bib\n---\n\n\n# Programming Activity Guide\n\nPlease see (link webR activity) for a guide on how to interact with the different question types for the following activity.\n\n## Packages\n\nWe'll use: **tidyverse** for majority of the activity and **scales** for pretty plot labels. These are ready to use for you in this activity!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(scales)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'gridExtra'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:dplyr':\n\n    combine\n```\n\n\n:::\n:::\n\n\n## The Data\n\nWe will use the `iris` dataset for this activity. This dataset is pre-packaged for you to use in R [@fisher].\n\nThe iris dataset contains four features (length and width of sepals and petals) of three species of Iris (Iris setosa, Iris virginica and Iris versicolor). A sepal is the outer parts of the flower (often green and leaf-like) that enclose a developing bud. The petal are parts of a flower that are the pollen producing part of the flower that are often conspicuously colored. The data were collected in 1936 at the Gasp√© Peninsula, in Canada. The difference between sepals and petals can be seen below.\n\n![](images/iris.png){fig-align=\"center\"}\n\nLet's first take a `glimpse` of our data set to become more familiar.\n\n```{webr-r}\n\nglimpse(iris)\n\n```\n\nHow many rows and columns do we have in our dataset?\n\n<label>Answer:</label> <br>\n\n\n```{=html}\n<textarea rows=\"4\" cols=\"50\">\n</textarea>\n```\n\n<br><br>\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\nThere are 5 columns and 150 rows in the `iris` dataset.\n:::\n\n## Visualizing data with `ggplot2`\n\nFirst, let's explore the variable `Petal.Length`. Add the following correct `geom` to make side-by-side boxplots of `Petal.Length` for each `Species`.\n\n```{webr-r}\niris |>\n  ggplot(\n    aes(x = Species, y = Petal.Length)) + \n  #add geom here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\nadd `geom_boxplot()` to the following code above to create side-by-side boxplots of `Petal.Length` for each `Species`\n:::\n\nThe code below takes your existing code, and colors each boxplot by `Species` using `fill =`. Change the `fill` to `color`. What happens? Why?\n\n```{webr-r}\niris |>\n  ggplot(\n    aes(x = Species, y = Petal.Length, fill = Species)) + \n  geom_boxplot()\n```\n\n<label>Answer:</label> <br>\n\n\n```{=html}\n<textarea rows=\"4\" cols=\"50\">\n</textarea>\n```\n\n<br><br>\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n`fill =` fills in or changes the entire boxplot with color. `color =` changes the outline of your specific geom. The exception to this rule is the default shape for `geom_point`, where the default shape used for a scatterplot is a solid circle that will be filled in regardless if color or fill is used.\n:::\n\n## layering geoms\n\nYou can layer more than one geom on your plot. Add an additional layer to your code to create the following plot seen below.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](iris-data-visualization_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n```{webr-r}\niris |>\n  ggplot(\n    aes(x = Species, y = Petal.Length, fill = Species)) + \n  geom_boxplot() \n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\nA `+` sign needs to go after `geom_boxplot` to signify an additional layer of the ggplot. We can use `geom_point()` to recreate the plot above.\n:::\n\nNow, instead of using `geom_point`, use `geom_jitter`. How does the plot change? What is the difference between `geom_point` and `geom_jitter`?\n\n```{webr-r}\niris |>\n  ggplot(\n    aes(x = Species, y = Petal.Length, fill = Species)) + \n  geom_boxplot() \n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\nThe points are now more spread out on each of the three boxplots. `geom_jitter` jitters our observations adding a small amount of random noise to data. It is used to spread out points that would otherwise overlap.\n:::\n\n## labels + themes\n\nAny professional plot must have informative titles and labels. This can be accomplished using the `labs` function in R. Please add the following text to the plot:\n\nTitle: Petal Length for each Species\n\nY-axis: Petal Length in cm\n\n```{webr-r}\niris |>\n  ggplot(\n    aes(x = Species, y = Petal.Length, fill = Species)) + \n  geom_boxplot() + \n  geom_jitter()\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |>\n  ggplot(\n    aes(x = Species, y = Petal.Length, fill = Species)) + \n  geom_boxplot() + \n  geom_jitter() + \n  labs(\n  title = \"Petal Length for each Species\",\n  y = \"Petal Length in cm\"\n)\n```\n\n::: {.cell-output-display}\n![](iris-data-visualization_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n:::\n\nWe can use `themes` to continue to make plots more professional looking. Themes control all non-data aesthetics of our plot (e.g., plot background color). There are many themes in R to choose from. A a lit of themes can be found [here](https://ggplot2.tidyverse.org/reference/ggtheme.html) .\n\nExplore the theme reference page and layer the following themes onto your plot:\n\n-- `theme_bw`\n\n-- `theme_light`\n\n-- `theme_minimal`\n\nDocument what and what does not change.\n\n```{webr-r}\niris |>\n  ggplot(\n    aes(x = Species, y = Petal.Length, fill = Species)) + \n  geom_boxplot() + \n  geom_jitter() + \n  labs(\n  title = \"Petal Length for each Species\",\n  y = \"Petal Length in cm\"\n)\n```\n\n<label>Notes:</label> <br>\n\n\n```{=html}\n<textarea rows=\"4\" cols=\"50\">\n</textarea>\n```\n\n<br><br>\n\n## Visualizing other variables\n\nPick two variables (or more) from the `iris` dataset and make a visualization to visualize the relationship between the two variables. Along with your code and output, practice describing the relationship between your variables.\n\n```{webr-r}\n\n```\n\n<label>Notes:</label> <br>\n\n\n```{=html}\n<textarea rows=\"4\" cols=\"50\">\n</textarea>\n```\n\n<br><br>\n\n::: {.callout-tip collapse=\"true\"}\n## Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |>\n  ggplot(\n    aes(x = Petal.Width, y = Petal.Length, color = Species)) + \n  geom_point() +\n  labs(\n  title = \"Petal Length and Width by Species\",\n  y = \"Petal Length in cm\",\n  x = \"Petal Width in cm\"\n) + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](iris-data-visualization_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThe relationship between petal length and width is strong, positive and linear for each of the three species in the iris data set. It appears that the species virginica has the largest petals while setosa has the smallest.\n:::\n\n# Quiz\n\n**Things to think about** \n\n-- I'm writing code using the pipe. Do you plan on introducing the |> to Coursera students right away, or not? \n\n-- I haven't put a lot of thought into the ordering of the questions, or how one question may inform another. I'm just getting drafts and ideas onto the page. \n\nUse the following plot to answer questions 1, 2, 3 and 4.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](iris-data-visualization_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n1.  In 1-2 sentences, describe what the plot shows about the relationships between the variables you plotted.\n\n2.  True or False: The points of the graph will become darker if we change `alpha` to equal 1.\n\n2b. Certain points on the graph are darker than others. Why? Justify your answer.\n\n3a. Is a legend necessary for the following plot?\n\n3b. Regardless of your answer above, please change arguments within `geom_boxplot` to remove the legend.\n\n```{webr-r}\n#| echo: false\niris |>\n  ggplot(\n    aes(x = Species, y = Petal.Length, fill = Species)) + \n  geom_boxplot() + \n  geom_jitter() + \n  labs(\n  title = \"Petal Length for each Species\",\n  y = \"Petal Length in cm\"\n)\n```\n\n4. Please edit the following code below in the `aes` so that the boxplots appear exactly as above, but horizontal instead of vertical. \n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |>\n  ggplot(\n    aes(#fill in code here)) + \n  geom_boxplot() + \n  geom_jitter(alpha = 0.3) + \n  labs(\n  title = \"Petal Length for each Species\",\n  y = \"Petal Length in cm\"\n)\n```\n:::\n\n\n5.  Match the geom with the corresponding plot that the geom creates:\n\n| Geom           |\n|----------------|\n| `geom_density` |\n| `geom_boxplot` |\n| `geom_violin`  |\n| `geom_point`   |\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](iris-data-visualization_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n6.  Based on the following visualization, determine if the each sentence are true or false:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](iris-data-visualization_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n-- This histogram is *left skewed*\n\n-- This histogram is *unimodel*\n\n-- This histogram is *right skewed*\n\n7.  The appropriate geom to make a barplot is of *Species* is...\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |>\n  ggplot(\n    aes(x = Species)\n  ) + \n```\n:::\n\n\na.  geom_bar()\nb.  geom_barplot()\nc.  geom_category()\nd.  geom_rod()\n\n\n8.  **True or False:** Using a barplot to graph numerical data can be misleading, and sacrifices a distributional representation of the data.\n\n\n9.  Please see the following code below. Select all options that violate the R code style guide.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=iris,mapping=aes(x=Species,y=Sepal.Length,fill=Species))+geom_boxplot() +scale_fill_viridis_d()\n```\n:::\n\n\na. data = & mapping = should always be removed from ggplot code\nb. needs to be spaces after separators, such as a comma\nc. The operators `|>` and `+` should always be the end of a line of code\nd. There should never be empty ()s after a function\n\n10. \n\n\n\n",
    "supporting": [
      "iris-data-visualization_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}