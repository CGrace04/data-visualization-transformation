{
  "hash": "32cbb8ede9c80aa5e755266736544c99",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mario games + data visualization\"\norder: 3\nwebr:\n  packages: ['tidyverse' , 'scales' , 'ggridges' , 'ggExtra']\n---\n\n\n::: callout-important\nPlease reference the `webR-intro` programming exercise for information and instructions on how to interact with the programming exercise below.\n:::\n\n## Getting started\n\nPlease run the following code by clicking the [green arrow]{style=\"color:green;\"} just above the code chunk.\nWhen reading in the data, nothing will appear after you click the button.\nHowever, clicking the arrow ensures that your data are read in and can be used for the following programming exercise.\n\n```{webr-r}\n#| context: setup\ndownload.file(\n  \"https://raw.githubusercontent.com/ElijahMeyer3/Coursera/main/data/mariokart.csv\",\n  \"mariokart.csv\"\n)\n```\n\n```{webr-r}\n#| echo: false\nmario <- read.csv(\"mariokart.csv\")\n```\n\n\n::: {.cell}\n\n:::\n\n\nIn this mini analysis we work with the data from the **openintro** package in R.\nThese data are auction data from Ebay for the game Mario Kart for the Nintendo Wii, collected in October 2009.\nA key to these data can be found below:\n\n|               |                                                                                                                                                    |\n|----------------|--------------------------------------------------------|\n| variable name | description                                                                                                                                        |\n| id            | Auction ID assigned by Ebay.                                                                                                                       |\n| duration      | Auction length, in days                                                                                                                            |\n| n_bids        | Number of bids                                                                                                                                     |\n| cond          | Game condition, either new or used                                                                                                                 |\n| start_pr      | Start price of the auction                                                                                                                         |\n| ship_pr       | Shipping price                                                                                                                                     |\n| total_pr      | Total price, which equals the auction price plus the shipping price                                                                                |\n| ship_sp       | Shipping speed or method                                                                                                                           |\n| seller_rate   | The seller's rating on Ebay. This is the number of positive ratings minus the number of negative ratings for the seller                            |\n| stock_photo   | Whether the auction feature photo was a stock photo or not, either yes or no                                                                       |\n| wheels        | Number of Wii wheels included in the auction. These are steering wheel attachments to make it seem as though you are actually driving in the game. |\n| title         | The title of the auctions                                                                                                                          |\n\n### Packages\n\nWe'll use **tidyverse** for majority of the analysis and **scales** for pretty plot labels later on.\n**ggridges** allows us to make ridge plots, and **gridExtra** allows to arrange plots next to each other.\nThese are ready to use for you in this programming exercise!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(ggridges)\nlibrary(gridExtra)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n### Get to know the data\n\nWe can use `glimpse()` to get an overview (or \"glimpse\") of the data.\nWrite the following code below to accomplish this task.\n\nWith your output, confirm that:\n\n-   There are 143 rows\n\n-   There are 12 variables (columns) in the dataset\n\n::: callout-warning\nIf you receive the error [Error: object 'mario' not found]{style=\"color:red;\"}, go back and read in your data above.\n:::\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mario)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 143\nColumns: 12\n$ id          <dbl> 150377422259, 260483376854, 320432342985, 280405224677, 17…\n$ duration    <int> 3, 7, 3, 3, 1, 3, 1, 1, 3, 7, 1, 1, 1, 1, 7, 7, 3, 3, 1, 7…\n$ n_bids      <int> 20, 13, 16, 18, 20, 19, 13, 15, 29, 8, 15, 15, 13, 16, 6, …\n$ cond        <chr> \"new\", \"used\", \"new\", \"new\", \"new\", \"new\", \"used\", \"new\", …\n$ start_pr    <dbl> 0.99, 0.99, 0.99, 0.99, 0.01, 0.99, 0.01, 1.00, 0.99, 19.9…\n$ ship_pr     <dbl> 4.00, 3.99, 3.50, 0.00, 0.00, 4.00, 0.00, 2.99, 4.00, 4.00…\n$ total_pr    <dbl> 51.55, 37.04, 45.50, 44.00, 71.00, 45.00, 37.02, 53.99, 47…\n$ ship_sp     <chr> \"standard\", \"firstClass\", \"firstClass\", \"standard\", \"media…\n$ seller_rate <int> 1580, 365, 998, 7, 820, 270144, 7284, 4858, 27, 201, 4858,…\n$ stock_photo <chr> \"yes\", \"yes\", \"no\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"ye…\n$ wheels      <int> 1, 1, 1, 1, 2, 0, 0, 2, 1, 1, 2, 2, 2, 2, 1, 0, 1, 1, 2, 2…\n$ title       <chr> \"~~ Wii MARIO KART &amp; WHEEL ~ NINTENDO Wii ~ BRAND NEW …\n```\n\n\n:::\n:::\n\n:::\n\n## Variables of interest\n\nThe variables we'll focus on are the following:\n\n-   `total_pr`: total price of game sold plus shipping in USD\n-   `ship_sp`: Shipping speed or method\n    -   `firstClass`\n    -   `media`\n    -   `other`\n    -   `parcel`\n    -   `priority`\n    -   `standard`\n    -   `ups3Day`\n    -   `upsGround`\n-   `cond`: Binary variable representing the condition of the video game\n    -   `new`\n    -   `used`\n\n## Visualizing categorical data with `ggplot2`\n\nFirst, let's explore the variable `cond`.\nSpecifically, let's investigate how many `new` games were sold versus how many `used` games were sold by creating a barplot.\nAdd the following correct `geom_xx()` to make a barplot of `cond` below.\n\n```{webr-r}\n  ggplot(\n    mario,\n    aes(x = cond)\n  ) + \n  # add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  ggplot(\n    mario,\n    aes(x = cond)\n  ) +\n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](mario-data-visualization_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n:::\n\nNext, let's fill in the bars by the shipping method each game was shipped with (`ship_sp`).\n\n```{webr-r}\n  ggplot(\n    mario,\n    aes(x = cond, fill = # add code here)) +\n    geom_bar()\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  ggplot(\n    mario,\n    aes(x = cond, fill = ship_sp)\n  ) +\n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](mario-data-visualization_files/figure-html/plot-fill-solution-1.png){width=672}\n:::\n:::\n\n:::\n\nThe code above uses `fill` to color the segments of the boxplot by another categorical variable.\nBelow, we change `fill` to `color`.\nWhat happens?\nWhy?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  ggplot(\n    mario,\n    aes(x = cond, color = ship_sp)\n  ) +\n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](mario-data-visualization_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n<br>\n\n\n```{=html}\n<textarea rows=\"4\" cols=\"50\">\n</textarea>\n```\n\n<br><br>\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n`fill` defines the color in which the `geom` is filled in with, while color defines the color in which the `geom` is outlined.\nA special exception to this is with scatterplots, where the dots are not treated as shapes to be filled in, and instead are filled in by color.\n:::\n\n## Count vs Proportion\n\nUp to this point, our bar plot has counted up the number of observations for each condition of game, and has been segmented by the count of shipping method.\nPerhaps it is easier to compare shipping method across condition of game if we looked at the proportion of shipping method within each game.\nThis can be achieved using `position = \"fill\"` in the `geom_xx()` statement.\nAlter the code below so that it includes `position = fill`, and comment on the relationship between condition and shipping method.\n\n```{webr-r}\n  ggplot(\n    mario,\n    aes(x = cond, fill = ship_sp)\n  ) +\n    geom_bar(position = #add code here)\n```\n\n<br>\n\n\n```{=html}\n<textarea rows=\"4\" cols=\"50\">\n</textarea>\n```\n\n<br><br>\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  ggplot(\n    mario,\n    aes(x = cond, fill = ship_sp)\n  ) +\n    geom_bar(position = \"fill\")\n```\n\n::: {.cell-output-display}\n![](mario-data-visualization_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nIt appears that new Mario games were mainly shipped using upsGround, while used Mario games were shipped using standard shipping.\n:::\n\n## Relationships between numerical and categorical variables\n\nUp to this point, we have been visualizing the relationship between categorical variables.\nWhat if we wanted to look at the relationships between different types of variables?\n\n### Boxplots\n\nOne way we can investigate the relationship between different types of variables is to create a boxplot.\nBelow, we are going to create a boxplot using `geom_boxplot()` between the variables `cond` and `total_pr`.\nWhat information can we gather from the boxplots?\n\n```{webr-r}\n  ggplot(\n    mario,\n    aes(x = cond, y = total_pr)\n  ) + \n   #add code here\n```\n\n<br>\n\n\n```{=html}\n<textarea rows=\"4\" cols=\"50\">\n</textarea>\n```\n\n<br><br>\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  ggplot(\n    mario,\n    aes(x = cond, y = total_pr)\n  ) +\n    geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](mario-data-visualization_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nWe can infer that the median total price for new Mario games is higher for the new condition versus the used condition.\nThere appears to be one outlier in new condition, and four outliers in the used condition.\nThe IQR of the new condition is slightly larger than the used condition.\n:::\n\n### Violin plot\n\nA violin plot is a lot like a box plot, but also shows us information about the density of the quantitative variable.\nBelow, we have a violin plot that again shows the relationship between the condition (`cond`) of the Mario game, and the total price (`total_pr`) of the game (cost + shipping).\nDescribe the relationship below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  ggplot(\n    mario,\n    aes(x = cond, y = total_pr)\n  ) +\n    geom_violin()\n```\n\n::: {.cell-output-display}\n![](mario-data-visualization_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n<br>\n\n\n```{=html}\n<textarea rows=\"4\" cols=\"50\">\n</textarea>\n```\n\n<br><br>\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\nIt appears that there is a higher density of new games at a higher price than used games.\nUsed games appear to have two potential outliers higher than any new game.\n:::\n\n### Ridge plots\n\nRidge plots, similar to violin plots, shows the distribution of a numeric variable across the levels of a categorical variable.\nIn order to make this plot, we will use `geom_density_ridges()`.\nAdd this geom to the following code below to make the ridge plots.\nWithin this geom, set alpha equal to 0.5.\n\n```{webr-r}\n  ggplot(\n    mario,\n    aes(x = total_pr, y = cond, fill = cond, color = cond)\n  ) + \n   #add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  ggplot(\n    mario,\n    aes(x = total_pr, y = cond, fill = cond, color = cond)\n  ) +\n    geom_density_ridges(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPicking joint bandwidth of 2.68\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](mario-data-visualization_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n:::\n\n## Working with `dplyr`\n\n[`dplyr`](https://dplyr.tidyverse.org/) is a grammar of data manipulation that helps you work with data. We are going to explore the following dplyr verbs on the `mario` data set: \n\n-   `select()`\n-   `filter()`\n-   `group_by()` & `summarize()`\n\nIn this demonstration, we are going to explore if there is a difference in mean total price for a used game, if the game was sold with or without the stock photo. Let's assume that we are only interested in new games.\n\n### `select()`\n\nFirst, let's use select to only select the columns of the data set we are interested in: `total_pr`, `cond`, and `stock_photo`.  \n\n\n::: {.cell}\n\n```{.webr .cell-code}\n# add code here\n```\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nmario |>\n  select(total_pr, cond, stock_photo)\n```\n:::\n\n\n\nNote, you could also reference the column by position, or subtract out the other columns using either names or position. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmario |>\n  select(4,7,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    cond total_pr stock_photo\n1    new    51.55         yes\n2   used    37.04         yes\n3    new    45.50          no\n4    new    44.00         yes\n5    new    71.00         yes\n6    new    45.00         yes\n7   used    37.02         yes\n8    new    53.99         yes\n9   used    47.00         yes\n10  used    50.00          no\n11   new    54.99         yes\n12   new    56.01         yes\n13   new    48.00         yes\n14   new    56.00         yes\n15  used    43.33         yes\n16  used    46.00         yes\n17   new    46.71         yes\n18   new    46.00         yes\n19   new    55.99         yes\n20  used   326.51          no\n21  used    31.00         yes\n22   new    53.98         yes\n23   new    64.95         yes\n24   new    50.50         yes\n25  used    46.50         yes\n26   new    55.00         yes\n27  used    34.50         yes\n28  used    36.00         yes\n29  used    40.00          no\n30   new    47.00         yes\n31  used    43.00         yes\n32  used    31.00         yes\n33  used    41.99         yes\n34  used    49.49         yes\n35  used    41.00         yes\n36  used    44.78         yes\n37  used    47.00          no\n38  used    44.00          no\n39   new    63.99         yes\n40   new    53.76         yes\n41   new    46.03          no\n42  used    42.25          no\n43  used    46.00          no\n44   new    51.99         yes\n45   new    55.99         yes\n46  used    41.99         yes\n47   new    53.99         yes\n48  used    39.00         yes\n49  used    38.06         yes\n50  used    46.00          no\n51   new    59.88         yes\n52  used    28.98         yes\n53  used    36.00          no\n54   new    51.99         yes\n55  used    43.95         yes\n56  used    32.00         yes\n57  used    40.06          no\n58  used    48.00          no\n59  used    36.00          no\n60  used    31.00          no\n61   new    53.99         yes\n62  used    30.00         yes\n63   new    58.00         yes\n64  used    38.10          no\n65  used   118.50          no\n66  used    61.76         yes\n67   new    53.99         yes\n68  used    40.00         yes\n69  used    64.50          no\n70  used    49.01          no\n71   new    47.00         yes\n72  used    40.10          no\n73   new    41.50          no\n74   new    56.00         yes\n75   new    64.95         yes\n76  used    49.00          no\n77  used    48.00         yes\n78  used    38.00          no\n79  used    45.00         yes\n80  used    41.95         yes\n81  used    43.36         yes\n82   new    54.99         yes\n83  used    45.21         yes\n84  used    65.02          no\n85  used    45.75         yes\n86   new    64.00         yes\n87  used    36.00         yes\n88   new    54.70         yes\n89   new    49.91         yes\n90  used    47.00         yes\n91  used    43.00          no\n92  used    35.99         yes\n93  used    54.49         yes\n94  used    46.00         yes\n95  used    31.06         yes\n96  used    55.60         yes\n97   new    40.10         yes\n98   new    52.59         yes\n99  used    44.00          no\n100 used    38.26          no\n101 used    51.00          no\n102  new    48.99         yes\n103  new    66.44         yes\n104  new    63.50         yes\n105 used    42.00          no\n106  new    47.00         yes\n107 used    55.00          no\n108 used    33.01         yes\n109  new    53.76         yes\n110  new    46.00         yes\n111 used    43.00         yes\n112 used    42.55         yes\n113 used    52.50         yes\n114  new    57.50         yes\n115  new    75.00         yes\n116 used    48.92         yes\n117  new    45.99         yes\n118 used    40.05         yes\n119  new    45.00         yes\n120 used    50.00         yes\n121  new    49.75         yes\n122 used    47.00          no\n123  new    56.00         yes\n124 used    41.00          no\n125  new    46.00          no\n126 used    34.99         yes\n127 used    49.00         yes\n128  new    61.00         yes\n129  new    62.89         yes\n130  new    46.00         yes\n131  new    64.95         yes\n132 used    36.99          no\n133 used    44.00         yes\n134 used    41.35         yes\n135 used    37.00          no\n136  new    58.98         yes\n137 used    39.00         yes\n138 used    40.70          no\n139 used    39.51         yes\n140 used    52.00          no\n141  new    47.70         yes\n142 used    38.76          no\n143  new    54.51         yes\n```\n\n\n:::\n\n```{.r .cell-code}\nmario |>\n  select(-c(1:3,5:6,8:9,11:12))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    cond total_pr stock_photo\n1    new    51.55         yes\n2   used    37.04         yes\n3    new    45.50          no\n4    new    44.00         yes\n5    new    71.00         yes\n6    new    45.00         yes\n7   used    37.02         yes\n8    new    53.99         yes\n9   used    47.00         yes\n10  used    50.00          no\n11   new    54.99         yes\n12   new    56.01         yes\n13   new    48.00         yes\n14   new    56.00         yes\n15  used    43.33         yes\n16  used    46.00         yes\n17   new    46.71         yes\n18   new    46.00         yes\n19   new    55.99         yes\n20  used   326.51          no\n21  used    31.00         yes\n22   new    53.98         yes\n23   new    64.95         yes\n24   new    50.50         yes\n25  used    46.50         yes\n26   new    55.00         yes\n27  used    34.50         yes\n28  used    36.00         yes\n29  used    40.00          no\n30   new    47.00         yes\n31  used    43.00         yes\n32  used    31.00         yes\n33  used    41.99         yes\n34  used    49.49         yes\n35  used    41.00         yes\n36  used    44.78         yes\n37  used    47.00          no\n38  used    44.00          no\n39   new    63.99         yes\n40   new    53.76         yes\n41   new    46.03          no\n42  used    42.25          no\n43  used    46.00          no\n44   new    51.99         yes\n45   new    55.99         yes\n46  used    41.99         yes\n47   new    53.99         yes\n48  used    39.00         yes\n49  used    38.06         yes\n50  used    46.00          no\n51   new    59.88         yes\n52  used    28.98         yes\n53  used    36.00          no\n54   new    51.99         yes\n55  used    43.95         yes\n56  used    32.00         yes\n57  used    40.06          no\n58  used    48.00          no\n59  used    36.00          no\n60  used    31.00          no\n61   new    53.99         yes\n62  used    30.00         yes\n63   new    58.00         yes\n64  used    38.10          no\n65  used   118.50          no\n66  used    61.76         yes\n67   new    53.99         yes\n68  used    40.00         yes\n69  used    64.50          no\n70  used    49.01          no\n71   new    47.00         yes\n72  used    40.10          no\n73   new    41.50          no\n74   new    56.00         yes\n75   new    64.95         yes\n76  used    49.00          no\n77  used    48.00         yes\n78  used    38.00          no\n79  used    45.00         yes\n80  used    41.95         yes\n81  used    43.36         yes\n82   new    54.99         yes\n83  used    45.21         yes\n84  used    65.02          no\n85  used    45.75         yes\n86   new    64.00         yes\n87  used    36.00         yes\n88   new    54.70         yes\n89   new    49.91         yes\n90  used    47.00         yes\n91  used    43.00          no\n92  used    35.99         yes\n93  used    54.49         yes\n94  used    46.00         yes\n95  used    31.06         yes\n96  used    55.60         yes\n97   new    40.10         yes\n98   new    52.59         yes\n99  used    44.00          no\n100 used    38.26          no\n101 used    51.00          no\n102  new    48.99         yes\n103  new    66.44         yes\n104  new    63.50         yes\n105 used    42.00          no\n106  new    47.00         yes\n107 used    55.00          no\n108 used    33.01         yes\n109  new    53.76         yes\n110  new    46.00         yes\n111 used    43.00         yes\n112 used    42.55         yes\n113 used    52.50         yes\n114  new    57.50         yes\n115  new    75.00         yes\n116 used    48.92         yes\n117  new    45.99         yes\n118 used    40.05         yes\n119  new    45.00         yes\n120 used    50.00         yes\n121  new    49.75         yes\n122 used    47.00          no\n123  new    56.00         yes\n124 used    41.00          no\n125  new    46.00          no\n126 used    34.99         yes\n127 used    49.00         yes\n128  new    61.00         yes\n129  new    62.89         yes\n130  new    46.00         yes\n131  new    64.95         yes\n132 used    36.99          no\n133 used    44.00         yes\n134 used    41.35         yes\n135 used    37.00          no\n136  new    58.98         yes\n137 used    39.00         yes\n138 used    40.70          no\n139 used    39.51         yes\n140 used    52.00          no\n141  new    47.70         yes\n142 used    38.76          no\n143  new    54.51         yes\n```\n\n\n:::\n:::\n\n:::\n\n\n### `filter()`\n\nThe function `filter()` acts on the rows of the data set, and subsets the data set based on a condition. Let's add on to our code and use the `filter()` function to subset the data to only look at used games.\n\n\n::: {.cell}\n\n```{.webr .cell-code}\nmario |>\n  select(total_pr, cond, stock_photo) |>\n  # add code here\n```\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nmario |>\n  select(total_pr, cond, stock_photo) |>\n  filter(cond == \"used\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   total_pr cond stock_photo\n1     37.04 used         yes\n2     37.02 used         yes\n3     47.00 used         yes\n4     50.00 used          no\n5     43.33 used         yes\n6     46.00 used         yes\n7    326.51 used          no\n8     31.00 used         yes\n9     46.50 used         yes\n10    34.50 used         yes\n11    36.00 used         yes\n12    40.00 used          no\n13    43.00 used         yes\n14    31.00 used         yes\n15    41.99 used         yes\n16    49.49 used         yes\n17    41.00 used         yes\n18    44.78 used         yes\n19    47.00 used          no\n20    44.00 used          no\n21    42.25 used          no\n22    46.00 used          no\n23    41.99 used         yes\n24    39.00 used         yes\n25    38.06 used         yes\n26    46.00 used          no\n27    28.98 used         yes\n28    36.00 used          no\n29    43.95 used         yes\n30    32.00 used         yes\n31    40.06 used          no\n32    48.00 used          no\n33    36.00 used          no\n34    31.00 used          no\n35    30.00 used         yes\n36    38.10 used          no\n37   118.50 used          no\n38    61.76 used         yes\n39    40.00 used         yes\n40    64.50 used          no\n41    49.01 used          no\n42    40.10 used          no\n43    49.00 used          no\n44    48.00 used         yes\n45    38.00 used          no\n46    45.00 used         yes\n47    41.95 used         yes\n48    43.36 used         yes\n49    45.21 used         yes\n50    65.02 used          no\n51    45.75 used         yes\n52    36.00 used         yes\n53    47.00 used         yes\n54    43.00 used          no\n55    35.99 used         yes\n56    54.49 used         yes\n57    46.00 used         yes\n58    31.06 used         yes\n59    55.60 used         yes\n60    44.00 used          no\n61    38.26 used          no\n62    51.00 used          no\n63    42.00 used          no\n64    55.00 used          no\n65    33.01 used         yes\n66    43.00 used         yes\n67    42.55 used         yes\n68    52.50 used         yes\n69    48.92 used         yes\n70    40.05 used         yes\n71    50.00 used         yes\n72    47.00 used          no\n73    41.00 used          no\n74    34.99 used         yes\n75    49.00 used         yes\n76    36.99 used          no\n77    44.00 used         yes\n78    41.35 used         yes\n79    37.00 used          no\n80    39.00 used         yes\n81    40.70 used          no\n82    39.51 used         yes\n83    52.00 used          no\n84    38.76 used          no\n```\n\n\n:::\n:::\n\n:::\n\n### `group_by()` & `summarize()`\n\nNow that we have a subset of our data set that is relavent to our question of interest, we can calcualte the mean total price using `group_by()` and `summarize()`. Note that `group_by()` groups our data frame together by the specified variable so that we can calculate summary statistics (like the mean), at the group level instead of for the entire data frame using `summarize()`. Report which mean is higher. Is this the result you expected? Why or why not? \n\n\n::: {.cell}\n\n```{.webr .cell-code}\nmario |>\n  select(total_pr, cond, stock_photo) |>\n  filter(cond == \"used\") |>\n  # add code here\n```\n:::\n\n\n<br>\n\n\n```{=html}\n<textarea rows=\"4\" cols=\"50\">\n</textarea>\n```\n\n<br><br>\n\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nmario |>\n  select(total_pr, cond, stock_photo) |>\n  filter(cond == \"used\") |>\n  group_by(stock_photo) |>\n  summarize(mean_pr = mean(total_pr))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  stock_photo mean_pr\n  <chr>         <dbl>\n1 no             54.8\n2 yes            42.0\n```\n\n\n:::\n:::\n\n\nThe mean total price is higher for a game that did not include a stock photo versus games that did. This is not what I expected, and would have expected that including a stock photo would have increased the price. This may be due to other variables in the data set not being accounted for in our calculations. \n:::\n\n### Extension: `mutate()`\n\nThe total price reported in our data set is in US dollars (USD). At the time of writing this exercise, the US exchange rate to Canadian currency (CAD) is 1.37. Suppose we wanted to answer the same question as above, but in CAD instead of USD. We can use `mutate()`to create a new `cad_total_pr` column before taking the mean `cad_total_pr` by stock photo. Recreate your table above, but in CAD. \n\n\n::: {.cell}\n\n```{.webr .cell-code}\n# add code here\n```\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nmario |>\n  select(total_pr, cond, stock_photo) |>\n  mutate(cad_total_pr = total_pr * 1.37) |>\n  filter(cond == \"used\") |>\n  group_by(stock_photo) |>\n  summarize(mean_pr_cad = mean(cad_total_pr))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  stock_photo mean_pr_cad\n  <chr>             <dbl>\n1 no                 75.0\n2 yes                57.5\n```\n\n\n:::\n:::\n\n:::\n\n## Reflection questions\n\n-   Why do you believe we are studying the content above?\n\n<br>\n\n```{=html}\n<textarea rows=\"8\" cols=\"50\">\n</textarea>\n```\n<br><br>\n\n-   List three topics that you feel very confident about from the content above.\n\n<br>\n\n```{=html}\n<textarea rows=\"8\" cols=\"50\">\n</textarea>\n```\n<br><br>\n\n-   List three topics that you feel could use more practice (or you are more curious about) from the content above.\n\n<br>\n\n```{=html}\n<textarea rows=\"8\" cols=\"50\">\n</textarea>\n```\n<br><br>\n\n",
    "supporting": [
      "mario-data-visualization_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}