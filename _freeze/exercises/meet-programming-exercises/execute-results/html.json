{
  "hash": "812c88664204f75bc3109a7dbc1e3075",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Meet the toolkit: Programming exercises\"\norder: 1\nwebr:\n  packages: ['tidyverse']\n---\n\n\nProgramming exercises are designed to provide an opportunity for you to put what you learn in the videos and readings.\nThese exercises feature interactive code chunks using a tool called [WebR](https://docs.r-wasm.org/webr/latest), which allow you to write, edit, and run R code without leaving your browser.\n\n# Components\n\n## Code chunks\n\nInteractive code chunks look like the following:\n\n```{webr-r}\n1 + 1\n```\n\nMajority of the code chunks in these documents will be interactive, like the one shown above.\nHowever, some code chunks will be static and include code that you can't edit and you are just meant to read and review the output of.\nThese will look like the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\nFor example, we'll use the **tidyverse** package in every programming exercise.\nTherefore, each exercise will start with a static code chunk that loads this package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## Questions\n\nMany of the questions in the programming exercises require you to actively do something -- edit existing code, write code from scratch, write a narrative, etc.\nCode goes in interactive code chunks that have a *Run Code* button, narrative goes in text boxes.\n\nHowever, some questions come with complete code that you don't need to edit, but still need to run to view the output.\nThese questions will also often invite you to make modifications to explore alternatives.\n\nThe final question of each programming exercise will be a **reflection questions**.\nThese questions are designed to help you think about and further engage with the concepts you just performed.\n\n::: callout-tip\n## Saving Your Work\n\n**Your work does not automatically save.**\n\nFor most browsers, the most efficient way to save your work is by using the *Print* feature.\nThis may be useful if you want to come back and reference your work after you've completed it.\n\n-   Right click anywhere on this html page.\n-   Select *Print...*.\n-   Under *Destination* drop-down menu, select *Save as PDF*.\n-   Click on *Save* and navigate to where you wish to save your work.\n:::\n\n# Practice\n\n## Calculator\n\nFirst, let's get started by using R as a calculator.\n\nIn the interactive code chunk below, perform the following calculations by typing the code and then clicking *Run Code*.\n\n-   Run code: Run the code below as is.\n\n    ```{webr-r}\n    2 + 2\n    ```\n\n-   Modify code: Modify the code below to multiply 3 by 6 instead of 3 by 5.\n\n    ```{webr-r}\n    3 * 5\n    ```\n\n-   Write code: Use the code chunk below to calculate 10 divided by 2 (`10 / 2`):\n\n    ```{webr-r}\n    # add code here\n    ```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 2 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\n3 * 6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18\n```\n\n\n:::\n\n```{.r .cell-code}\n10 / 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n:::\n\n## Functions\n\nR is a functional language.\nFunctions act as the name of algorithmic details that are used to accomplish a specific task.\nFor example, if I wanted to round the value 3.23, I could accomplish this with the function `round()` in R.\nThe number 3.23 is an `argument` to the function `round()`.\nAn argument is an input to a function.\nA `value` is produced as a result.\n\nex.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(3.22)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\nOften times, functions can take on multiple arguments.\nPreviously, we saw `round(3.225)` produce the value `3`.\nThis is because round defaults to producing a value to the nearest whole number.\nHowever, we can override the default inputing a second argument.\n**You are not expected to memorize all arguments of every function you learn during this course**.\nIf you have R locally installed, you can run a `?` in front of the function name in your console to pull up a help file that will define the arguments of a function for you.\nThese help files can also be found on line.\nFor example, here is the help file for round [here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/Round)\n\nFrom the documentation, you can see the second argument of the function `round` is digits.\n\n**Your Turn** Change the 0 to another number, and take note on how this changes the corresponding output when you click [Run Code]{style=\"color:green;\"}.\n\n```{webr-r}\nround(3.22, digits = 0)\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(3.22, digits = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.2\n```\n\n\n:::\n:::\n\n:::\n\nAs you may notice, the first argument and second argument are separated by a `,`.\nThis is consistent across all functions in R.\n\n::: callout-tip\nIf you provide the arguments in the exact same order as they are defined in the help file, you do not have to include the name of the argument\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(3.225, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.2\n```\n\n\n:::\n:::\n\n\n## Exploring `mtcars`\n\nFor the remainder of this activity, we are going to practice using functions on the `mtcars` data set.\nThese data were extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models).\n\n**Demo** Run the following code to see the first six lines of data below\n\n```{webr-r}\nhead(mtcars)\n```\n\nWhat is the name of the function used in the above code?\nWhat is the input?\n\n<label>Answer:</label> <br>\n\n\n```{=html}\n<textarea rows=\"4\" cols=\"50\">\n</textarea>\n```\n\n<br><br>\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\nThe function is named **head**\n\nThe argument is the dataset **mtcars**\n:::\n\nWe can also get a better sense of the data we are working with by using the `glimpse()` function.\nThis allows us to see how many rows and columns we have in our data set, the type of data we are working with, and the data inputs.\nFor now, we just want to practice writing the function to initially explore these data.\n\n**Your Turn** Use the `glimpse()` function on the `mtcars` data set below.\n\n```{webr-r}\n# add code here\n```\n\nHow many rows are in the `mtcars` data set?\nHow many columns?\n\n<label>Answer:</label> <br>\n\n\n```{=html}\n<textarea rows=\"4\" cols=\"50\">\n</textarea>\n```\n\n<br><br>\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 32\nColumns: 11\n$ mpg  <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…\n$ cyl  <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…\n$ disp <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…\n$ hp   <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180…\n$ drat <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,…\n$ wt   <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.…\n$ qsec <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…\n$ vs   <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,…\n$ am   <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,…\n$ gear <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,…\n$ carb <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,…\n```\n\n\n:::\n:::\n\n\nThere are **32** rows in the mtcars data set\n\nThere are **11** columns in the mtcars data set\n:::\n\n**Your Turn**: There are many other functions we can use on data to explore it prior to making data visualizations.\nYou are encouraged to explore the help files of the following:\n\n-   `tail()`\n\n-   `slice()`\n\nAfter doing so, try to answer answer the following questions!\n\nUse `tail()` to produce the last six lines of the `mtcars` data set.\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntail(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                mpg cyl  disp  hp drat    wt qsec vs am gear carb\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2\nFord Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1    5    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1    5    6\nMaserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1    5    8\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2\n```\n\n\n:::\n:::\n\n:::\n\nNow, use `slice` to produce the first three lines of the `mtcars` data set.\n\n```{webr-r}\n# add code here\n```\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice(mtcars, 1:3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4     21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710    22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n```\n\n\n:::\n:::\n\n:::\n\nIn the subsequent lessons, we are going to learn how to manipulate, work with, and plot data using a variety of functions in R.\n\n## Reflection questions\n\n-   Why do you believe we are studying the content above?\n\n<br>\n\n```{=html}\n<textarea rows=\"8\" cols=\"50\">\n</textarea>\n```\n<br><br>\n\n-   List three topics that you feel very confident about from the content above.\n\n<br>\n\n```{=html}\n<textarea rows=\"8\" cols=\"50\">\n</textarea>\n```\n<br><br>\n\n-   List three topics that you feel could use more practice (or you are more curious about) from the content above.\n\n<br>\n\n```{=html}\n<textarea rows=\"8\" cols=\"50\">\n</textarea>\n```\n<br><br>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}