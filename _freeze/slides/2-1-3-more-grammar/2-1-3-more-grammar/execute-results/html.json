{
  "hash": "b3b093ef2642e1dae678c9d029b05253",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Untitled\"\nformat: revealjs\neditor: visual\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n```\n:::\n\n\n\n# Aesthetics {.section-break}\n\n## Aesthetics options\n\nCommonly used characteristics of plotting characters that can be **mapped to a specific variable** in the data are\n\n-   `color`\n-   `shape`\n-   `size`\n-   `alpha` (transparency)\n\n## color\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nggplot(penguins,\n       aes(x = bill_depth_mm, \n           y = bill_length_mm,\n           color = species)) +\n  geom_point() +\n  scale_color_viridis_d()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2-1-3-more-grammar_files/figure-revealjs/unnamed-chunk-2-1.png){width=576}\n:::\n:::\n\n\n\n## Shape\n\nMapped to a different variable than `color`\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nggplot(penguins,\n       aes(x = bill_depth_mm, \n           y = bill_length_mm,\n           color = species,\n           shape = island)) + #<<\n  geom_point() +\n  scale_color_viridis_d()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2-1-3-more-grammar_files/figure-revealjs/unnamed-chunk-3-1.png){width=576}\n:::\n:::\n\n\n\n## Shape\n\nMapped to same variable as `color`\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nggplot(penguins,\n       aes(x = bill_depth_mm, \n           y = bill_length_mm,\n           color = species,\n           shape = species)) +\n  geom_point() +\n  scale_color_viridis_d()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2-1-3-more-grammar_files/figure-revealjs/unnamed-chunk-4-1.png){width=576}\n:::\n:::\n\n\n\n## Size\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nggplot(penguins,\n       aes(x = bill_depth_mm, \n           y = bill_length_mm,\n           color = species,\n           shape = species,\n           size = body_mass_g)) +\n  geom_point() +\n  scale_color_viridis_d()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2-1-3-more-grammar_files/figure-revealjs/unnamed-chunk-5-1.png){width=576}\n:::\n:::\n\n\n\n## Alpha\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nggplot(penguins,\n       aes(x = bill_depth_mm, \n           y = bill_length_mm,\n           color = species,\n           shape = species,\n           size = body_mass_g,\n           alpha = flipper_length_mm)) + #<<\n  geom_point() +\n  scale_color_viridis_d()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2-1-3-more-grammar_files/figure-revealjs/unnamed-chunk-6-1.png){width=576}\n:::\n:::\n\n\n\n## Mapping vs. setting\n\n::: columns\n::: {.column width=\"50%\"}\n**Mapping:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins,\n       aes(x = bill_depth_mm,\n           y = bill_length_mm,\n           size = body_mass_g, #<<\n           alpha = flipper_length_mm)) + #<<\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2-1-3-more-grammar_files/figure-revealjs/unnamed-chunk-7-1.png){width=576}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n**Setting:**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins,\n       aes(x = bill_depth_mm,\n           y = bill_length_mm)) + \n  geom_point(size = 2, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](2-1-3-more-grammar_files/figure-revealjs/unnamed-chunk-8-1.png){width=100%}\n:::\n:::\n\n\n:::\n:::\n\n## Mapping vs. setting\n\n-   **Mapping:** Determine the size, alpha, etc. of points based on the values of a variable in the data\n    -   goes into `aes()`\n-   **Setting:** Determine the size, alpha, etc. of points **not** based on the values of a variable in the data\n    -   goes into `geom_*()` (this was `geom_point()` in the previous example, but we'll learn about other geoms soon!)\n\nclass: middle\n\n# Faceting\n\n## Faceting\n\n-   Smaller plots that display different subsets of the data\n-   Useful for exploring conditional relationships and large data\n\n.panelset\\[ .panel\\[.panel-name\\[Plot\\]\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2-1-3-more-grammar_files/figure-revealjs/unnamed-chunk-9-1.png){width=70%}\n:::\n:::\n\n\n\n.panel\\[.panel-name\\[Code\\]\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + \n  geom_point() +\n  facet_grid(species ~ island) #<<\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values\n(`geom_point()`).\n```\n\n\n:::\n:::\n\n\n\n## Various ways to facet\n\n.question\\[ In the next few slides describe what each plot displays.\nThink about how the code relates to the output.\n\n**Note:** The plots in the next few slides do not have proper titles, axis labels, etc. because we want you to figure out what's happening in the plots.\nBut you should always label your plots!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + \n  geom_point() +\n  facet_grid(species ~ sex) #<<\n```\n\n::: {.cell-output-display}\n![](2-1-3-more-grammar_files/figure-revealjs/unnamed-chunk-10-1.png){width=576}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + \n  geom_point() +\n  facet_grid(sex ~ species) #<<\n```\n\n::: {.cell-output-display}\n![](2-1-3-more-grammar_files/figure-revealjs/unnamed-chunk-11-1.png){width=576}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + \n  geom_point() +\n  facet_wrap(~ species) #<<\n```\n\n::: {.cell-output-display}\n![](2-1-3-more-grammar_files/figure-revealjs/unnamed-chunk-12-1.png){width=576}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + \n  geom_point() +\n  facet_grid(. ~ species) #<<\n```\n\n::: {.cell-output-display}\n![](2-1-3-more-grammar_files/figure-revealjs/unnamed-chunk-13-1.png){width=576}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + \n  geom_point() +\n  facet_wrap(~ species, ncol = 2) #<<\n```\n\n::: {.cell-output-display}\n![](2-1-3-more-grammar_files/figure-revealjs/unnamed-chunk-14-1.png){width=576}\n:::\n:::\n\n\n\n## Faceting summary\n\n-   `facet_grid()`:\n    -   2d grid\n    -   `rows ~ cols`\n    -   use `.` for no split\n-   `facet_wrap()`: 1d ribbon wrapped according to number of rows and columns specified or available plotting area\n\n## Facet and color\n\n.pull-left-narrow\\[\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  penguins, \n  aes(x = bill_depth_mm, \n      y = bill_length_mm, \n      color = species)) + #<<\n  geom_point() +\n  facet_grid(species ~ sex) +\n  scale_color_viridis_d() #<<\n```\n:::\n\n\n\n.pull-right-wide\\[\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2-1-3-more-grammar_files/figure-revealjs/unnamed-chunk-15-1.png){width=100%}\n:::\n:::\n\n\n\n## Face and color, no legend\n\n.pull-left-narrow\\[\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  penguins, \n  aes(x = bill_depth_mm, \n      y = bill_length_mm, \n      color = species)) +\n  geom_point() +\n  facet_grid(species ~ sex) +\n  scale_color_viridis_d() +\n  guides(color = \"none\") #<<\n```\n:::\n\n\n\n.pull-right-wide\\[\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2-1-3-more-grammar_files/figure-revealjs/unnamed-chunk-16-1.png){width=100%}\n:::\n:::\n\n\n\n# Summary\n\n## Summary\n\nStructure of the code for plots can be summarized as\n\n``` r\nggplot(data = [dataset], \n       mapping = aes(x = [x-variable], \n                     y = [y-variable])) +\n   geom_xxx() +\n   other options\n```\n",
    "supporting": [
      "2-1-3-more-grammar_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}