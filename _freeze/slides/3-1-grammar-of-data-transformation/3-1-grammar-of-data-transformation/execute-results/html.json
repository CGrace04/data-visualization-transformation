{
  "hash": "3b6db3a47281b69ccd031a1f5cc6bb1d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Grammar of data transformation\"\nformat: \n  revealjs:\n    auto-stretch: true\n---\n\n\n\n\n\n# Data frames and `tibble`s\n\n## NYC Flights\n\n-   To demonstrate data transformation we will use `flights`, a tibble in the **nycflights13** R package.\n\n-   The data set includes characteristics of all flights departing from New York City (JFK, LGA, EWR) in 2013.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n:::\n\n\n\n## `flights` -- dimensions\n\n-   Number of rows:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 336776\n```\n\n\n:::\n:::\n\n\n\n. . .\n\n-   Number of columns:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncol(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19\n```\n\n\n:::\n:::\n\n\n\n## `flights` -- first look with `glimpse()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013,…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, …\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, …\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2…\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913,…\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854,…\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, …\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\",…\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 5…\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804…\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", …\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", …\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, …\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1…\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6,…\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, …\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05…\n```\n\n\n:::\n:::\n\n\n\n## `flights` -- first look with `names()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"year\"           \"month\"          \"day\"           \n [4] \"dep_time\"       \"sched_dep_time\" \"dep_delay\"     \n [7] \"arr_time\"       \"sched_arr_time\" \"arr_delay\"     \n[10] \"carrier\"        \"flight\"         \"tailnum\"       \n[13] \"origin\"         \"dest\"           \"air_time\"      \n[16] \"distance\"       \"hour\"           \"minute\"        \n[19] \"time_hour\"     \n```\n\n\n:::\n:::\n\n\n\n## `flights` -- first look with `head()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 19\n   year month   day dep_time sched_dep_time dep_delay\n  <int> <int> <int>    <int>          <int>     <dbl>\n1  2013     1     1      517            515         2\n2  2013     1     1      533            529         4\n3  2013     1     1      542            540         2\n4  2013     1     1      544            545        -1\n5  2013     1     1      554            600        -6\n6  2013     1     1      554            558        -4\n# ℹ 13 more variables: arr_time <int>,\n#   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n## `tibble` vs. data frame\n\n::: incremental\n-   **tibble**: an opinionated version of the `R` data frame\n-   All tibbles are data frames, but not all data frames are tibbles!\n-   Two main differences between a tibble and a data frame:\n    -   Printing\n    -   Stricter subsetting\n:::\n\n## Printing - `tibble`s\n\nDisplay first 10 rows and all of the columns that fit on the screen will display, along with the type of each column.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay\n   <int> <int> <int>    <int>          <int>     <dbl>\n 1  2013     1     1      517            515         2\n 2  2013     1     1      533            529         4\n 3  2013     1     1      542            540         2\n 4  2013     1     1      544            545        -1\n 5  2013     1     1      554            600        -6\n 6  2013     1     1      554            558        -4\n 7  2013     1     1      555            600        -5\n 8  2013     1     1      557            600        -3\n 9  2013     1     1      557            600        -3\n10  2013     1     1      558            600        -2\n# ℹ 336,766 more rows\n# ℹ 13 more variables: arr_time <int>,\n#   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n## Printing - `data.frame`s\n\n(Attempt to) display all of the data, or die (crash) trying (if the dataset is too large)!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncars\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   speed dist\n1      4    2\n2      4   10\n3      7    4\n4      7   22\n5      8   16\n6      9   10\n7     10   18\n8     10   26\n9     10   34\n10    11   17\n11    11   28\n12    12   14\n13    12   20\n14    12   24\n15    12   28\n16    13   26\n17    13   34\n18    13   34\n19    13   46\n20    14   26\n21    14   36\n22    14   60\n23    14   80\n24    15   20\n25    15   26\n26    15   54\n27    16   32\n28    16   40\n29    17   32\n30    17   40\n31    17   50\n32    18   42\n33    18   56\n34    18   76\n35    18   84\n36    19   36\n37    19   46\n38    19   68\n39    20   32\n40    20   48\n41    20   52\n42    20   56\n43    20   64\n44    22   66\n45    23   54\n46    24   70\n47    24   92\n48    24   93\n49    24  120\n50    25   85\n```\n\n\n:::\n:::\n\n\n\n## Stricter subsetting -- `tibble`s\n\nWarning + `NULL` if variable not found.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights$apple\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Unknown or uninitialised column: `apple`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n:::\n\n\n\n## Stricter subsetting -- `data.frame`s\n\nOnly `NULL` if variable not found.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncars$apple\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n:::\n\n\n\n# `dplyr`\n\n## dplyr $\\in$ tidyverse\n\n::: columns\n::: {.column width=\"40%\"}\n::: incremental\n-   **dplyr** is tidyverse's primary package for data transformation\n-   Package website: [dplyr.tidyverse.org](https://dplyr.tidyverse.org)\n:::\n:::\n\n::: {.column width=\"30%\"}\n![](images/dplyr-part-of-tidyverse.png){fig-align=\"left\" width=\"400\"}\n:::\n:::\n\n## Row operations\n\n::: incremental\n-   `slice()`: chooses rows based on location\n-   `filter()`: chooses rows based on column values\n-   `arrange()`: changes the order of the rows\n-   `sample_n()`: take a random subset of the rows\n:::\n\n## `slice()`\n\nDisplay the first five rows of `flights`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2\"}\nflights |>      # <1>   \n  slice(1:5)    # <2>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 19\n   year month   day dep_time sched_dep_time dep_delay\n  <int> <int> <int>    <int>          <int>     <dbl>\n1  2013     1     1      517            515         2\n2  2013     1     1      533            529         4\n3  2013     1     1      542            540         2\n4  2013     1     1      544            545        -1\n5  2013     1     1      554            600        -6\n# ℹ 13 more variables: arr_time <int>,\n#   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n1.  Take the `flights` data frame, **and then**,\n2.  Slice its first five rows\n\n## `filter()`\n\nFilter for flights to RDU in `flights`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2\"}\nflights |>                 # <1>   \n  filter(dest == \"RDU\")    # <2>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8,163 × 19\n    year month   day dep_time sched_dep_time dep_delay\n   <int> <int> <int>    <int>          <int>     <dbl>\n 1  2013     1     1      800            810       -10\n 2  2013     1     1      832            840        -8\n 3  2013     1     1      851            851         0\n 4  2013     1     1      917            920        -3\n 5  2013     1     1     1024           1030        -6\n 6  2013     1     1     1127           1129        -2\n 7  2013     1     1     1157           1205        -8\n 8  2013     1     1     1240           1235         5\n 9  2013     1     1     1317           1325        -8\n10  2013     1     1     1449           1450        -1\n# ℹ 8,153 more rows\n# ℹ 13 more variables: arr_time <int>,\n#   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n1.  Take the `flights` data frame, **and then**,\n2.  Filter for rows where `dest` *is equal to* `RDU`\n\n## The pipe operator\n\n::: incremental\n-   The **pipe**, `|>`, is an operator (a tool) for passing information from one process to another.\n\n-   Use `|>` mainly in data pipelines to pass the output of the previous line of code as the first input of the next line of code.\n\n-   When reading code \"in English\", say \"and then\" whenever you see a pipe.\n:::\n\n## Delayed flights to RDU\n\n::: task\nWhich airline is the most delayed, on average, arriving in RDU from a New York City airport?\n:::\n\n. . .\n\n**Goal:**\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  carrier mean_arr_delay\n  <chr>            <dbl>\n1 UA               56   \n2 B6               13.3 \n3 EV               12.2 \n4 9E                9.67\n5 MQ                8.82\n```\n\n\n:::\n:::\n\n\n\n## The pipe, in action\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights # <1>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay\n   <int> <int> <int>    <int>          <int>     <dbl>\n 1  2013     1     1      517            515         2\n 2  2013     1     1      533            529         4\n 3  2013     1     1      542            540         2\n 4  2013     1     1      544            545        -1\n 5  2013     1     1      554            600        -6\n 6  2013     1     1      554            558        -4\n 7  2013     1     1      555            600        -5\n 8  2013     1     1      557            600        -3\n 9  2013     1     1      557            600        -3\n10  2013     1     1      558            600        -2\n# ℹ 336,766 more rows\n# ℹ 13 more variables: arr_time <int>,\n#   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n1.  Take the flights data frame\n\n## The pipe, in action\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>               # <1>\n  filter(dest == \"RDU\")  # <2>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8,163 × 19\n    year month   day dep_time sched_dep_time dep_delay\n   <int> <int> <int>    <int>          <int>     <dbl>\n 1  2013     1     1      800            810       -10\n 2  2013     1     1      832            840        -8\n 3  2013     1     1      851            851         0\n 4  2013     1     1      917            920        -3\n 5  2013     1     1     1024           1030        -6\n 6  2013     1     1     1127           1129        -2\n 7  2013     1     1     1157           1205        -8\n 8  2013     1     1     1240           1235         5\n 9  2013     1     1     1317           1325        -8\n10  2013     1     1     1449           1450        -1\n# ℹ 8,153 more rows\n# ℹ 13 more variables: arr_time <int>,\n#   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n1.  Take the flights data frame,\n2.  **and then** filter for flights going to RDU\n\n## The pipe, in action\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>                  # <1>\n  filter(dest == \"RDU\") |>  # <2>\n  group_by(carrier)         # <3>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8,163 × 19\n# Groups:   carrier [5]\n    year month   day dep_time sched_dep_time dep_delay\n   <int> <int> <int>    <int>          <int>     <dbl>\n 1  2013     1     1      800            810       -10\n 2  2013     1     1      832            840        -8\n 3  2013     1     1      851            851         0\n 4  2013     1     1      917            920        -3\n 5  2013     1     1     1024           1030        -6\n 6  2013     1     1     1127           1129        -2\n 7  2013     1     1     1157           1205        -8\n 8  2013     1     1     1240           1235         5\n 9  2013     1     1     1317           1325        -8\n10  2013     1     1     1449           1450        -1\n# ℹ 8,153 more rows\n# ℹ 13 more variables: arr_time <int>,\n#   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n1.  Take the flights data frame,\n2.  **and then** filter for flights going to RDU,\n3.  **and then** group by carrier\n\n## The pipe, in action\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>                  # <1>\n  filter(dest == \"RDU\") |>  # <2>\n  group_by(carrier) |>      # <3>\n  summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE)) # <4>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  carrier mean_arr_delay\n  <chr>            <dbl>\n1 9E                9.67\n2 B6               13.3 \n3 EV               12.2 \n4 MQ                8.82\n5 UA               56   \n```\n\n\n:::\n:::\n\n\n\n1.  Take the flights data frame,\n2.  **and then** filter for flights going to RDU,\n3.  **and then** group by carrier,\n4.  **and then** calculate the mean arrival delay for each carrier\n\n## The pipe, in action\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>                  # <1>\n  filter(dest == \"RDU\") |>  # <2>\n  group_by(carrier) |>      # <3>\n  summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE)) |> # <4>\n  arrange(desc(mean_arr_delay)) # <5>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  carrier mean_arr_delay\n  <chr>            <dbl>\n1 UA               56   \n2 B6               13.3 \n3 EV               12.2 \n4 9E                9.67\n5 MQ                8.82\n```\n\n\n:::\n:::\n\n\n\n1.  Take the flights data frame,\n2.  **and then** filter for flights going to RDU,\n3.  **and then** group by carrier,\n4.  **and then** calculate the mean arrival delay for each carrier,\n5.  **and then** arrange in descending order of mean arrival delay.\n\n## Column operations\n\n::: incremental\n-   `select()`: changes whether or not a column is included\n-   `rename()`: changes the names of columns\n-   `mutate()`: changes the values of columns or creates new columns\n:::\n\n## Groups of rows\n\n::: incremental\n-   `group_by()`: perform calculations separately for each value of a variable\n-   `summarize()`: collapses a group into a single row\n-   `count()`: count unique values of one or more variables\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}