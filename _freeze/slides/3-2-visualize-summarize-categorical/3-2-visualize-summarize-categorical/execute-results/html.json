{
  "hash": "c985f98738ec807e95d66c3124467921",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing and summarizing categorical data\"\nformat: \n  revealjs:\n    auto-stretch: true\n---\n\n\n\n\n\n\n# Terminology {.section-break}\n\n## Number of variables involved\n\n::: incremental\n-   Univariate data analysis - distribution of single variable\n-   Bivariate data analysis - relationship between two variables\n-   Multivariate data analysis - relationship between many variables at once, usually focusing on the relationship between two while conditioning for others\n:::\n\n## Types of variables\n\n::: incremental\n-   **Numerical variables** can be classified as **continuous** or **discrete** based on whether or not the variable can take on an infinite number of values or only non-negative whole numbers, respectively.\n-   If the variable is **categorical**, we can determine if it is **ordinal** based on whether or not the levels have a natural ordering.\n:::\n\n# Data\n\n## Data: Lending Club\n\n::: columns\n::: {.column width=\"40%\"}\n-   Thousands of loans made through the Lending Club, which is a platform that allows individuals to lend to other individuals\n:::\n\n::: {.column width=\"30%\"}\n![](images/lending-club.png)\n:::\n:::\n\n::: incremental\n-   Not all loans are created equal -- ease of getting a loan depends on (apparent) ability to pay back the loan\n\n-   Data includes loans *made*, these are not loan applications\n:::\n\n## Take a peek at data\n\n\n\n\n::: {.cell output.lines='18'}\n\n```{.r .cell-code}\nlibrary(openintro)\nglimpse(loans_full_schema)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 10,000\nColumns: 55\n$ emp_title                        <chr> \"global config en…\n$ emp_length                       <dbl> 3, 10, 3, 1, 10, …\n$ state                            <fct> NJ, HI, WI, PA, C…\n$ homeownership                    <fct> MORTGAGE, RENT, R…\n$ annual_income                    <dbl> 90000, 40000, 400…\n$ verified_income                  <fct> Verified, Not Ver…\n$ debt_to_income                   <dbl> 18.01, 5.04, 21.1…\n$ annual_income_joint              <dbl> NA, NA, NA, NA, 5…\n$ verification_income_joint        <fct> , , , , Verified,…\n$ debt_to_income_joint             <dbl> NA, NA, NA, NA, 3…\n$ delinq_2y                        <int> 0, 0, 0, 0, 0, 1,…\n$ months_since_last_delinq         <int> 38, NA, 28, NA, N…\n$ earliest_credit_line             <dbl> 2001, 1996, 2006,…\n$ inquiries_last_12m               <int> 6, 1, 4, 0, 7, 6,…\n$ total_credit_lines               <int> 28, 30, 31, 4, 22…\n$ open_credit_lines                <int> 10, 14, 10, 4, 16…\n$ total_credit_limit               <int> 70795, 28800, 241…\n$ total_credit_utilized            <int> 38767, 4321, 1600…\n$ num_collections_last_12m         <int> 0, 0, 0, 0, 0, 0,…\n$ num_historical_failed_to_pay     <int> 0, 1, 0, 1, 0, 0,…\n$ months_since_90d_late            <int> 38, NA, 28, NA, N…\n$ current_accounts_delinq          <int> 0, 0, 0, 0, 0, 0,…\n$ total_collection_amount_ever     <int> 1250, 0, 432, 0, …\n$ current_installment_accounts     <int> 2, 0, 1, 1, 1, 0,…\n$ accounts_opened_24m              <int> 5, 11, 13, 1, 6, …\n$ months_since_last_credit_inquiry <int> 5, 8, 7, 15, 4, 5…\n$ num_satisfactory_accounts        <int> 10, 14, 10, 4, 16…\n$ num_accounts_120d_past_due       <int> 0, 0, 0, 0, 0, 0,…\n$ num_accounts_30d_past_due        <int> 0, 0, 0, 0, 0, 0,…\n$ num_active_debit_accounts        <int> 2, 3, 3, 2, 10, 1…\n$ total_debit_limit                <int> 11100, 16500, 430…\n$ num_total_cc_accounts            <int> 14, 24, 14, 3, 20…\n$ num_open_cc_accounts             <int> 8, 14, 8, 3, 15, …\n$ num_cc_carrying_balance          <int> 6, 4, 6, 2, 13, 5…\n$ num_mort_accounts                <int> 1, 0, 0, 0, 0, 3,…\n$ account_never_delinq_percent     <dbl> 92.9, 100.0, 93.5…\n$ tax_liens                        <int> 0, 0, 0, 1, 0, 0,…\n$ public_record_bankrupt           <int> 0, 1, 0, 0, 0, 0,…\n$ loan_purpose                     <fct> moving, debt_cons…\n$ application_type                 <fct> individual, indiv…\n$ loan_amount                      <int> 28000, 5000, 2000…\n$ term                             <dbl> 60, 36, 36, 36, 3…\n$ interest_rate                    <dbl> 14.07, 12.61, 17.…\n$ installment                      <dbl> 652.53, 167.54, 7…\n$ grade                            <fct> C, C, D, A, C, A,…\n$ sub_grade                        <fct> C3, C1, D1, A3, C…\n$ issue_month                      <fct> Mar-2018, Feb-201…\n$ loan_status                      <fct> Current, Current,…\n$ initial_listing_status           <fct> whole, whole, fra…\n$ disbursement_method              <fct> Cash, Cash, Cash,…\n$ balance                          <dbl> 27015.86, 4651.37…\n$ paid_total                       <dbl> 1999.330, 499.120…\n$ paid_principal                   <dbl> 984.14, 348.63, 1…\n$ paid_interest                    <dbl> 1015.19, 150.49, …\n$ paid_late_fees                   <dbl> 0, 0, 0, 0, 0, 0,…\n```\n\n\n:::\n:::\n\n\n\n\n## Selected variables\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloans <- loans_full_schema |>\n  select(\n    loan_amount, interest_rate, term, grade, \n    state, annual_income, homeownership, debt_to_income\n  )\nglimpse(loans)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 10,000\nColumns: 8\n$ loan_amount    <int> 28000, 5000, 2000, 21600, 23000, 50…\n$ interest_rate  <dbl> 14.07, 12.61, 17.09, 6.72, 14.07, 6…\n$ term           <dbl> 60, 36, 36, 36, 36, 36, 60, 60, 36,…\n$ grade          <fct> C, C, D, A, C, A, C, B, C, A, C, B,…\n$ state          <fct> NJ, HI, WI, PA, CA, KY, MI, AZ, NV,…\n$ annual_income  <dbl> 90000, 40000, 40000, 30000, 35000, …\n$ homeownership  <fct> MORTGAGE, RENT, RENT, RENT, RENT, O…\n$ debt_to_income <dbl> 18.01, 5.04, 21.15, 10.16, 57.96, 6…\n```\n\n\n:::\n:::\n\n\n\n\n## Selected variables {.midi}\n\n| variable         | description                                                                                                            |\n|---------------------|-------------------------------------------|\n| `loan_amount`    | Amount of the loan received, in US dollars                                                                             |\n| `interest_rate`  | Interest rate on the loan, in an annual percentage                                                                     |\n| `term`           | The length of the loan, which is always set as a whole number of months                                                |\n| `grade`          | Loan grade, which takes a values A through G and represents the quality of the loan and its likelihood of being repaid |\n| `state`          | US state where the borrower resides                                                                                    |\n| `annual_income`  | Borrower’s annual income, including any second income, in US dollars                                                   |\n| `homeownership`  | Indicates whether the person owns, owns but has a mortgage, or rents                                                   |\n| `debt_to_income` | Debt-to-income ratio                                                                                                   |\n\n## Variable types\n\n| variable         | type                     |\n|------------------|--------------------------|\n| `loan_amount`    | numerical, continuous    |\n| `interest_rate`  | numerical, continuous    |\n| `term`           | numerical, discrete      |\n| `grade`          | categorical, ordinal     |\n| `state`          | categorical, not ordinal |\n| `annual_income`  | numerical, continuous    |\n| `homeownership`  | categorical, not ordinal |\n| `debt_to_income` | numerical, continuous    |\n\n# Visualizing categorical data\n\n## Bar plot\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(loans, aes(x = homeownership)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](3-2-visualize-summarize-categorical_files/figure-revealjs/unnamed-chunk-4-1.png){width=576}\n:::\n:::\n\n\n\n\n## Segmented bar plot\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(loans, aes(x = homeownership, fill = grade)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](3-2-visualize-summarize-categorical_files/figure-revealjs/unnamed-chunk-5-1.png){width=576}\n:::\n:::\n\n\n\n\n## Segmented bar plot\n\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nggplot(loans, aes(x = homeownership, fill = term)) +\n  geom_bar()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The following aesthetics were dropped during statistical\ntransformation: fill\nℹ This can happen when ggplot fails to infer the correct\n  grouping structure in the data.\nℹ Did you forget to specify a `group` aesthetic or to\n  convert a numerical variable into a factor?\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](3-2-visualize-summarize-categorical_files/figure-revealjs/unnamed-chunk-6-1.png){width=576}\n:::\n:::\n\n\n\n\n## Numerical to categorical {.nostretch}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|3|4\"}\nloans |>\n  mutate(term = as.factor(term)) |>\n  ggplot(aes(x = homeownership, fill = term)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](3-2-visualize-summarize-categorical_files/figure-revealjs/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n## Segmented bar plot - proportions {.nostretch}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|4\"}\nloans |>\n  mutate(term = as.factor(term)) |>\n  ggplot(aes(x = homeownership, fill = term)) +\n  geom_bar(position = \"fill\")\n```\n\n::: {.cell-output-display}\n![](3-2-visualize-summarize-categorical_files/figure-revealjs/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n## Frequencies vs. proportions\n\n::: task\nWhich bar plot is a more useful representation for visualizing the relationship between homeownership and term?\n:::\n\n:::: {.columns}\n\n::: {.column width=\"35%\"}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](3-2-visualize-summarize-categorical_files/figure-revealjs/unnamed-chunk-9-1.png){width=576}\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"35%\"}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](3-2-visualize-summarize-categorical_files/figure-revealjs/unnamed-chunk-10-1.png){width=576}\n:::\n:::\n\n\n\n:::\n\n::::\n\n## Customizing bar plots {.smaller .nostretch}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|4|5-9|10\"}\nloans |>\n  mutate(term = as.factor(term)) |>\n  ggplot(aes(y = homeownership, fill = term)) +\n  geom_bar(position = \"fill\") +\n  labs(\n    x = \"Proportion\", y = \"Homeownership\", fill = \"Term\",\n    title = \"Terms of Lending Club loans\",\n    subtitle = \"and homeownership of borrowers\"\n  ) +\n  scale_fill_manual(values = c(\"lightblue\", \"darkgreen\"))\n```\n\n::: {.cell-output-display}\n![](3-2-visualize-summarize-categorical_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n\n\n# Summarizing categorical data\n\n## Frequency table\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\nloans |>\n  count(homeownership)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  homeownership     n\n  <fct>         <int>\n1 MORTGAGE       4789\n2 OWN            1353\n3 RENT           3858\n```\n\n\n:::\n:::\n\n\n\n\n## Relative frequency table\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|3\"}\nloans |>\n  count(homeownership) |>\n  mutate(proportion = n / sum(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  homeownership     n proportion\n  <fct>         <int>      <dbl>\n1 MORTGAGE       4789      0.479\n2 OWN            1353      0.135\n3 RENT           3858      0.386\n```\n\n\n:::\n:::\n\n\n\n\n## Frequency table with multiple variables\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\nloans |>\n  count(homeownership, term)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  homeownership  term     n\n  <fct>         <dbl> <int>\n1 MORTGAGE         36  3071\n2 MORTGAGE         60  1718\n3 OWN              36   998\n4 OWN              60   355\n5 RENT             36  2901\n6 RENT             60   957\n```\n\n\n:::\n:::\n\n\n\n\n## Relative frequency table with multiple variables\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|3|4\"}\nloans |>\n  count(homeownership, term) |>\n  group_by(homeownership) |>\n  mutate(proportion = n / sum(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n# Groups:   homeownership [3]\n  homeownership  term     n proportion\n  <fct>         <dbl> <int>      <dbl>\n1 MORTGAGE         36  3071      0.641\n2 MORTGAGE         60  1718      0.359\n3 OWN              36   998      0.738\n4 OWN              60   355      0.262\n5 RENT             36  2901      0.752\n6 RENT             60   957      0.248\n```\n\n\n:::\n:::\n",
    "supporting": [
      "3-2-visualize-summarize-categorical_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}