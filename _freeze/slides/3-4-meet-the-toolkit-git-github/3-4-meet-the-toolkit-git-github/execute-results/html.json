{
  "hash": "86a780dad5adb2297a60ec203ac4142c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Meet the toolkit: Git and GitHub\"\nformat: revealjs\n---\n\n\n# Learning goals  \n\n## Configuring Git\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"usethis\")\n\nusethis::use_git_config(\n  user.name = \"Your name\", \n  user.email = \"Email associated with your GitHub account\"\n )\n```\n:::\n\n\n## By the end of the course, you will ...\n\n::: incremental\n-   understand the importance of version control\n\n-   understand how we use Git & GitHub for version control\n\n-   set up and configure a personal access token\n\n-   understand how to clone your course project\n:::\n\n# Version control\n\n## Versioning - done badly\n\n![](images/phd_comics_vc.gif){fig-align=\"center\"}\n\n## Versioning - done better\n\n![](images/lego-steps.png){fig-align=\"center\"}\n\n## Versioning - done even better\n\n### with human readable messages\n\n![](images/lego-steps-commit-messages.png){fig-align=\"center\"}\n\n## Git and GitHub {.smaller}\n\n::: columns\n::: {.column width=\"35%\"}\n![](images/git-logo.png){fig-alt=\"Git logo\" fig-align=\"center\" width=\"150\"}\n\n-   It's not the only version control system, but it's a very popular one\n\n-   Git is a version control system -- like \"Track Changes\" features from Microsoft Word, on steroids\n:::\n\n::: {.column width=\"35%\"}\n![](images/github-logo.png){fig-alt=\"GitHub logo\" fig-align=\"center\" width=\"150\"}\n\n-   GitHub is the home for your Git-based projects on the internet -- like DropBox but much, much better\n\n-   We will use GitHub as a platform for your course projects\n:::\n:::\n\n##  {.center}\n\n[Let's take a tour of]{.hand-blue-large}\n\n![](images/tech.png){fig-align=\"center\"}\n\n<p style=\"text-align: right;\">\n\n[Project Repo](https://github.com/data-science-with-r/data-visualization-transformation-project)\n\n</p>\n\n## Tour recap\n\nCreate a GitHub account\n\n-   Go to [Github](https://github.com/) and walk through the steps for creating an account.\n\n-   Youâ€™ll need to choose a user name.\n    I recommend reviewing the user name advice [here](https://happygitwithr.com/github-acct#username-advice) before choosing a username.\n\n## Creating a new repository\n\n-   [Project Repo](https://github.com/data-science-with-r/data-visualization-transformation-project)\n\n![](images/template.png){fig-align=\"left\"}\n\n-   Make sure you are the owner\n\n-   We recommend naming your repo the same name as the original\n\n## Personal access token\n\n-   Get a personal access token (PAT): `usethis::create_github_token()`\n\n-   Copy your PAT\n\n-   Insert PAT to configure Git, GitHub and R `gitcreds::gitcreds_set()`\n\n```         \n> gitcreds::gitcreds_set()\n\n? Enter password or token: ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n-> Adding new credentials...\n-> Removing credentials from cache...\n-> Done.\n```\n\n## Clone repository\n\n![](images/code.png){fig-align=\"center\"}\n\n## Clone repository\n\n![](images/https.png){fig-align=\"center\"}\n\n## Clone repository\n\n![](images/copy.png){fig-align=\"center\"}\n\n## Project\n\n-   File -\\> New Project\n\n-   Version control -\\> Git\n\n-   Paste -\\> Create project\n\n## Version control workflow {.smaller}\n\n![](images/pcp-git.png){fig-align=\"center\"}\n\n## Environments window\n\n![](images/git-tab.png){fig-align=\"center\"}\n\n## Environments window\n\n![](images/buttons.png){fig-align=\"center\"}\n\n## Git and GitHub tips\n\n::: incremental\n-   There are many many git commands ...\n    but very few people know them all.\n    99% of the time you will use git to push, commit, and pull\n\n-   If you are looking for additional resources for working with git and R, continue reading: [happygitwithr.com](http://happygitwithr.com/).\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}