---
title: "Mario games + data visualization"
order: 3
webr:
  packages: ['tidyverse', 'scales' , 'ggridges' , 'gridExtra']
---

::: callout-important
Please reference the `webR-intro` programming exercise for information and instructions on how to interact with the programming exercise below.
:::

## Getting started

Please run the following code by clicking the [green arrow]{style="color:green;"} just above the code chunk.
When reading in the data, nothing will appear after you click the button.
However, clicking the arrow ensures that your data are read in and can be used for the following programming exercise.

```{webr-r}
#| context: setup
download.file(
  "https://raw.githubusercontent.com/ElijahMeyer3/Coursera/main/data/Mariokart.csv",
  "Mariokart.csv"
)
```

```{webr-r}
#| echo: false
mario <- read.csv("mariokart.csv")
```

```{r}
#| echo: false
mario <- read.csv("data/mariokart.csv") # put in R file to r chunks have data to use
```

In this mini analysis we work with the data from the **openintro** package in R.
These data are auction data from Ebay for the game Mario Kart for the Nintendo Wii, collected in October 2009.
A key to these data can be found below:

|               |                                                                                                                                                    |
|-------------|-----------------------------------------------------------|
| variable name | description                                                                                                                                        |
| id            | Auction ID assigned by Ebay.                                                                                                                       |
| duration      | Auction length, in days                                                                                                                            |
| n_bids        | Number of bids                                                                                                                                     |
| cond          | Game condition, either new or used                                                                                                                 |
| start_pr      | Start price of the auction                                                                                                                         |
| ship_pr       | Shipping price                                                                                                                                     |
| total_pr      | Total price, which equals the auction price plus the shipping price                                                                                |
| ship_sp       | Shipping speed or method                                                                                                                           |
| seller_rate   | The seller's rating on Ebay. This is the number of positive ratings minus the number of negative ratings for the seller                            |
| stock_photo   | Whether the auction feature photo was a stock photo or not, either yes or no                                                                       |
| wheels        | Number of Wii wheels included in the auction. These are steering wheel attachments to make it seem as though you are actually driving in the game. |
| title         | The title of the auctions                                                                                                                          |

### Packages

We'll use **tidyverse** for majority of the analysis and **scales** for pretty plot labels later on.
**ggridges** allows us to make ridge plots, and **gridExtra** allows to arrange plots next to each other.
These are ready to use for you in this programming exercise!

```{r}
#| label: load-packages
#| message: false
#| warning: false
library(tidyverse)
library(scales)
library(ggridges)
library(gridExtra)
```

```{r}
#| echo: false
library(tidyverse) # put in r file to r chunks have packages to use
library(scales)
library(ggridges)
library(gridExtra)
```

### Get to know the data

We can use `glimpse()` to get an overview (or "glimpse") of the data.
Write the following code below to accomplish this task.

With your output, confirm that:

-   There are 143 rows

-   There are 12 variables (columns) in the dataset

::: callout-warning
If you receive the error [Error: object 'mario' not found]{style="color:red;"}, go back and read in your data above.
:::

```{webr-r}
# add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
glimpse(mario)
```
:::

## Variables of interest

The variables we'll focus on are the following:

-   `total_pr`: total price of game sold plus shipping in usd
-   `ship_sp`: Shipping speed or method
    -   `firstClass`
    -   `media`
    -   `other`
    -   `parcel`
    -   `priority`
    -   `standard`
    -   `ups3Day`
    -   `upsGround`
-   `cond`: Binary variable representing the condition of the video game
    -   `new`
    -   `used`

## Visualizing categorical data with `ggplot2`

First, let's explore the variable `cond`.
Specifically, let's investigate how many `new` games were sold versus how many `used` games were sold by creating a barplot.
Add the following correct `geom_xx()` to make a barplot of `cond` below.

```{webr-r}
  ggplot(
    mario,
    aes(x = cond)
  ) + 
  # add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
  ggplot(
    mario,
    aes(x = cond)
  ) +
    geom_bar()
```
:::

Next, let's fill in the bars by the shipping method each game was shipped with (`ship_sp`).

```{webr-r}
  ggplot(
    mario,
    aes(x = cond, fill = # add code here)) +
    geom_bar()
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| label: plot-fill-solution
  ggplot(
    mario,
    aes(x = cond, fill = ship_sp)
  ) +
    geom_bar()
```
:::

The code above uses `fill` to color the segments of the boxplot by another categorical variable.
Below, we change `fill` to `color`.
What happens?
Why?

```{r}
  ggplot(
    mario,
    aes(x = cond, color = ship_sp)
  ) +
    geom_bar()
```

<br>

```{=html}
<textarea rows="4" cols="50">
</textarea>
```
<br><br>

::: {.callout-tip collapse="true"}
## Solution

`fill` defines the color in which the `geom` is filled in with, while color defines the color in which the `geom` is outlined.
A special exception to this is with scatterplots, where the dots are not treated as shapes to be filled in, and instead are filled in by color.
:::

## Count vs Proportion

Up to this point, our bar plot has counted up the number of observations for each condition of game, and has been segmented by the count of shipping method.
Perhaps it is easier to compare shipping method across condition of game if we looked at the proportion of shipping method within each game.
This can be achieved using `position = "fill"` in the `geom_xx()` statement.
Alter the code below so that it includes `position = fill`, and comment on the relationship between condition and shipping method.

```{webr-r}
  ggplot(
    mario,
    aes(x = cond, fill = ship_sp)
  ) +
    geom_bar(position = #add code here)
```

<br>

```{=html}
<textarea rows="4" cols="50">
</textarea>
```
<br><br>

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
  ggplot(
    mario,
    aes(x = cond, fill = ship_sp)
  ) +
    geom_bar(position = "fill")
```

It appears that new Mario games were mainly shipped using upsGround, while used Mario games were shipped using standard shipping.
:::

## Relationships between numerical and categorical variables

Up to this point, we have been visualizing the relationship between categorical variables.
What if we wanted to look at the relationships between different types of variables?

### Boxplots

One way we can investigate the relationship between different types of variables is to create a boxplot.
Below, we are going to create a boxplot using `geom_boxplot()` between the variables `cond` and `total_pr`.
What information can we gather from the boxplots?

```{webr-r}
  ggplot(
    mario,
    aes(x = cond, y = total_pr)
  ) + 
   #add code here
```

<br>

```{=html}
<textarea rows="4" cols="50">
</textarea>
```
<br><br>

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
  ggplot(
    mario,
    aes(x = cond, y = total_pr)
  ) +
    geom_boxplot()
```

We can infer that the median total price for new Mario games is higher for the new condition versus the used condition.
There appears to be one outlier in new condition, and four outliers in the used condition.
The IQR of the new condition is slightly larger than the used condition.
:::

### Violin plot

A violin plot is a lot like a box plot, but also shows us information about the density of the quantitative variable.
Below, we have a violin plot that again shows the relationship between the condition (`cond`) of the Mario game, and the total price (`total_pr`) of the game (cost + shipping).
Describe the relationship below.

```{r}
  ggplot(
    mario,
    aes(x = cond, y = total_pr)
  ) +
    geom_violin()
```

<br>

```{=html}
<textarea rows="4" cols="50">
</textarea>
```
<br><br>

::: {.callout-tip collapse="true"}
## Solution

It appears that there is a higher density of new games at a higher price than used games.
Used games appear to have two potential outliers higher than any new game.
:::

### Ridge plots

Ridge plots, similar to violin plots, shows the distribution of a numeric variable across the levels of a categorical variable.
In order to make this plot, we will use `geom_density_ridges()`.
Add this geom to the following code below to make the ridge plots.
Within this geom, set alpha equal to 0.5.

```{webr-r}
  ggplot(
    mario,
    aes(x = total_pr, y = cond, fill = cond, color = cond)
  ) + 
   #add code here
```

::: {.callout-tip collapse="true"}
## Solution

```{r}
#| echo: true
  ggplot(
    mario,
    aes(x = total_pr, y = cond, fill = cond, color = cond)
  ) +
    geom_density_ridges(alpha = 0.5)
```
:::

{{< include _reflection_question.qmd >}}
