---
title: "Mario Games + Data Visualization"
subtitle: "Module 1 - Ex 1"
author: ""
toc: true
filters: 
  - webr
webr:
  packages: ['tidyverse', 'scales']
---

# Programming Activity Guide

This activity is meant to provide an interactive environment for students to implement what they have learned from the videos. This activity allows you to write and run R-Code within the html document. Code chunks that allow you to do this look like:

```{webr-r}

# example interactive r-chunk

```

Sometimes, we provide code chunks that are not interactive, and will look like:

```{r}

# example r-chunk

```

There will be a variety of question types throughout the document. Question types include the following:

-- **Your Turn**: These coding questions ask students to explore / edit / manipulate existing to code. These questions are followed with an `Expected Solutions` box so students can get immediate feedback

-- **Demo**: These coding questions have the solutions within them and allow the students to run the code and think critically about the output.

Throughout the activity, you will see open text boxes. These text boxes will either be labeled *Answer* or *Notes*.

```         
  - Answer: This prompts you to answer a short-answer question. These questions are followed by 
  a `Solutions` tab to reveal the answer.
  
  - Notes: This provides a space to take notes to be referenced later. These are often gives 
  after `Demo` questions. 
```

::: callout-tip
## Saving Your Work

**Your work does not automatically save.**

For most browsers, the most efficient way to save your work is by using the `Print` feature. This may be useful if you want to come back and reference your work after it's completed.

-- Right click anywhere on this html page

-- Select `Print...`

-- Under the `Destination` tab, click `Save as PDF`

-- Select a file on your computer you wish to save your work.
:::

## Getting started

Please run the following code by clicking the [green arrow]{style="color:green;"} just above the code chunk. When reading in the data, nothing will appear after you click the button. However, clicking the arrow ensures that your data are read in and can be used for the following activity.

```{webr-r}
#| context: setup
download.file(
  "https://raw.githubusercontent.com/ElijahMeyer3/Coursera/main/data/mariokart.csv",
  "mariokart.csv"
)
```

```{webr-r}
#| echo: false
mario <- read.csv("mariokart.csv")
```

```{r}
#| echo: false
mario <- read.csv("data/mariokart.csv") # put in R file to r chunks have data to use
```

In this mini analysis we work with the data from the *openintro* package in R. These data are auction data from Ebay for the game Mario Kart for the Nintendo Wii, collected in October 2009. A key to these data can be found below:

|               |                                                                                                                                                    |
|---------------|----------------------------------------------------------------------------------------------------------------------------------------------------|
| variable name | description                                                                                                                                        |
| id            | Auction ID assigned by Ebay.                                                                                                                       |
| duration      | Auction length, in days                                                                                                                            |
| n_bids        | Number of bids                                                                                                                                     |
| cond          | Game condition, either `new` or `used`                                                                                                             |
| start_pr      | Start price of the auction                                                                                                                         |
| ship_pr       | Shipping price                                                                                                                                     |
| total_pr      | Total price, which equals the auction price plus the shipping price                                                                                |
| ship_sp       | Shipping speed or method                                                                                                                           |
| seller_rate   | The seller's rating on Ebay. This is the number of positive ratings minus the number of negative ratings for the seller                            |
| stock_photo   | Whether the auction feature photo was a stock photo or not, either `yes` or `no`                                                                   |
| wheels        | Number of Wii wheels included in the auction. These are steering wheel attachments to make it seem as though you are actually driving in the game. |
| title         | The title of the auctions                                                                                                                          |

### Packages

We'll use: **tidyverse** for majority of the analysis and **scales** for pretty plot labels later on. These are ready to use for you in this activity!

```{r}
#| label: load-packages
#| message: false
#| warning: false
library(tidyverse)
library(scales)
```

```{r}
#| echo: false

library(tidyverse) # put in r file to r chunks have packages to use
library(scales)

```


### Get to know the data

**Your Turn**: We can use the `glimpse` function to get an overview (or "glimpse") of the data. Write the following code below to accomplish this task.

With your output, confirm that:

-- There are 143 rows

-- There are 12 variables (columns) in the dataset

::: callout-warning
If you receive the error [Error: object 'mario' not found]{style="color:red;"}, go back and read in your data above.
:::

```{webr-r}
# add code here

```

**Demo**: We can use `slice` to look at rows of our data. Run the following code. Change the `5` to another number to print that many rows!

```{webr-r}
slice(mario, 1:5)
```

<label>Notes:</label> <br>

```{=html}
<textarea rows="4" cols="50">
</textarea>
```
<br><br>

What does each observation (row) in the data set represent?

<label>Answer:</label> <br>

```{=html}
<textarea rows="4" cols="50">
</textarea>
```
<br><br>

::: {.callout-tip collapse="true"}
## Solution

Each observation represents a **mario game**.
:::

## Variables of Interest (update)

The variables we'll focus on are the following:

-   `n_bids`: number of bids throughout the auction 
-   `total_pr`: total price of game sold plus shipping in usd 
-   `seller_rate`: The seller's rating on Ebay
-   `cond`: Binary variable representing the condition of the video game

## Visualizing data with `ggplot2`

**Demo**: **ggplot2** is the package and `ggplot()` is the function in this package that is used to create a plot. Interact with the code below by either running the code given, or adding code to achieve the expected solution when asked within the code chunk!

-   `ggplot()` creates the initial base coordinate system, and we will add layers to that base. We first specify the data set we will use with `data = mario`, and run the following to create our base.

```{webr-r}
#| label: plot-base
ggplot(data = mario)
```

-   The `mapping` argument is paired with an aesthetic (`aes()`), which tells us how the variables in our data set should be mapped to the visual properties of the graph.

```{webr-r}
#| label: plot-aesthetic-mapping
ggplot(data = mario, 
       mapping = aes(x = n_bids, y = total_pr))
```

-   As we previously mentioned, we often omit the names of the first two arguments in R functions. So you'll often see this written as:

```{webr-r}
#| label: plot-simplified-call
ggplot(mario, 
       aes(x = n_bids, y = total_pr))
```

Note that the result is exactly the same.

**Your Turn**: The `geom_xx` function specifies the type of plot we want to use to represent the data. In the code below, we want to use `geom_point`, which creates a plot where each observation is represented by a point.

```{webr-r}
#| label: plot-point
ggplot(mario, 
       aes(x = n_bids, y = total_pr)) +
  # type geom_point() here!
```

::: {.callout-tip collapse="true"}
## Expected Result

```{r}
#| echo: false
library(ggplot2)
ggplot(mario, 
       aes(x = n_bids, y = total_pr)) +
  geom_point()
```
:::

*FOR MINE* Should we omit some data so people can see that R omits a warning and a plot? And then talk about it like below:

Note that this results in a warning as well.

This warning represents the number of observations that were removed because there were missing data!

## Number of bids vs. total price

### Step 1

**Your Turn**: The following code changes the color of all points to coral. Explore different colors by changing "coral" to different colors!

::: callout-tip
See <http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf> for many color options you can use by name in R or use the [hex code](https://en.wikipedia.org/wiki/Web_colors) for a color of your choice.
:::

```{webr-r}
#| label: plot-point-color

ggplot(mario, 
       aes(x = n_bids, y = total_pr)) +
  geom_point(color = "coral") 
```

### Step 2

**Your Turn**: Add labels for the title and x and y axes using [labs](https://ggplot2.tidyverse.org/reference/labs.html). Do this by modifying the existing code below.

```{webr-r}
#| label: plot-labs

ggplot(mario, 
       aes(x = n_bids, y = total_pr)) +
  geom_point(color = "coral") + 
  # insert code here
```

::: {.callout-tip collapse="true"}
## Expected Result

```{r}
#| label: plot-labels

ggplot(mario, 
       aes(x = n_bids, y = total_pr))+
  geom_point(color = "deepskyblue3") + 
  labs(
    x = "Number of bids", 
    y = "Total price ($)", 
    title = "Total bids vs price"
    )
```
:::

### Step 3

**Your Turn**: An `aes`thetic is a visual property of one of the objects in your plot. Commonly used aesthetic options are:

-   color
-   fill
-   shape
-   size
-   alpha (transparency)

Modify the plot below, so the `color` of the points is based on the variable `cond`, and make the size of your points based on `seller_rate`.

```{webr-r}
#| label: plot-aes-color

ggplot(mario, 
       aes(x = n_bids, y = total_pr)) +
  geom_point() + 
  labs(
    x = "Number of bids", 
    y = "Total price ($)", 
    title = "Total bids vs price by condition and seller rating"
    )
```

::: {.callout-tip collapse="true"}
## Expected Result

```{r}
#| label: plot-aes-color-solution

ggplot(mario, 
       aes(x = n_bids, y = total_pr,
           color = cond, size = seller_rate)) +
  geom_point() + 
  labs(
    x = "Number of bids", 
    y = "Total price ($)", 
    title = "Total bids vs price by condition and seller rating"
    )
```
:::

### Step 4

**Your Turn**: Expand on your plot from the previous step to make the transparency (`alpha`) of the points 0.5.

```{webr-r}
#| label: plot-aes-alpha

ggplot(mario, 
       aes(x = n_bids, y = total_pr,
           color = cond, size = seller_rate)) +
  geom_point(alpha = #insert 0.5 here) + 
  labs(
    x = "Number of bids", 
    y = "Total price ($)", 
    title = "Total bids vs price by condition and seller rating"
    )
```

### Step 5

**Your Turn**: Expand on your plot from the previous step by using `facet_wrap` to display the association between budget and gross for different values of `stock_photo`.

```{webr-r}
#| label: plot-facet-wrap

ggplot(mario, 
  aes(x = n_bids, y = total_pr,
    color = cond, size = seller_rate)) +
  geom_point(alpha = 0.5) + 
  facet_wrap(~#insert variable here) +
  labs(
    x = "Number of bids", 
    y = "Total price ($)", 
    title = "Total bids vs price by condition and seller rating"
    )
```

::: {.callout-tip collapse="true"}
## Expected Result

```{r}
#| label: plot-facet-wrap-sol

ggplot(mario, 
  aes(x = n_bids, y = total_pr,
    color = cond, size = seller_rate)) +
  geom_point(alpha = 0.5) + 
  facet_wrap(~ stock_photo) +
  labs(
    x = "Number of bids", 
    y = "Total price ($)", 
    title = "Total bids vs price by condition and seller rating"
    )
```
:::

### Step 6

**Demo**: Below is a demonstration on how to improve your plot from the previous step by making the y scale more legible.

::: callout-tip
This is done through the use of the [**scales**](https://scales.r-lib.org/) package, specifically the `scale_x_continuous()` and `scale_y_continuous()` functions. Because we want to change the y-axis label, let's demo the `scale_y_continuous()` function below. 
:::

```{webr-r}
#| label: plot-scales

ggplot(mario, 
  aes(x = n_bids, y = total_pr,
    color = cond, size = seller_rate)) +
  geom_point(alpha = 0.5) + 
  facet_wrap(~stock_photo) +
  scale_y_continuous(labels = label_dollar()) +
  labs(
    x = "Number of bids", 
    y = "Total price ($)", 
    title = "Total bids vs price by condition and seller rating"
    )
```

<label>Notes:</label> <br>

```{=html}
<textarea rows="4" cols="50">
</textarea>
```
<br><br>

### Step 7

**Your Turn**: Expand on your plot from the previous step by using `facet_grid` to display the association between budget and gross for different combinations of `stock_photo` and `cond`. Comment on whether you notice any additional patters that were harder to see before.

```{webr-r}
#| label: plot-facet-grid

ggplot(mario, 
       aes(x = n_bids, y = total_pr,
           color = cond, size = seller_rate)) +
  geom_point(alpha = 0.5) + 
  facet_grid(stock_photo ~ cond) +
  scale_y_continuous(labels = label_dollar()) +
  labs(
    x = "Number of bids", 
    y = "Total price ($)", 
    title = "Total bids vs price by condition and seller rating"
    )
```

<label>Notes:</label> <br>

```{=html}
<textarea rows="4" cols="50">
</textarea>
```
<br><br>

# Quiz

**1 (dropdown question)** The `|>` operator in R represents the word (*then* \| with \| before \| after)

**2 (dropdown question)** The formal name for a row is a(an) (*observational unit* \| variable \| input). Columns in our data set represent a(an) (observational unit \| *variable* \| input).

**3 (multiple choice)** Below is a table that has all columns and five rows from the mario dataset. This is also commonly refereed to as a ...

![](images/data-frame.png){fig-align="center"}

a.  *data frame*

b.  data description

c.  data table

d.  data features

**4a (matching)** Suppose data were collected about customers at a coffee shop. Three variables were recorded for each customer: number of cups of coffee they ordered, customer height, whether the customer had previously visited this coffee shop before, and the customer's rating of their overall experience measures as "Bad", "Okay", and "Great". Use the information to classify each variable below:

| Variable        | Classification        |
|-----------------|-----------------------|
| Cups of Coffee  | Categorical - Ordinal |
| Height          | Categorical - Nominal |
| Visited Before  | Numeric - Discrete    |
| Customer Rating | Numeric - Continuous  |

**4b (dropdown question)** The researchers that collected data about customers at a coffee shop are interested in the relationship between cups of coffee and customer rating. Specifically, they are interested in if there is an increase in the number of cups of coffee a customer orders, does this influence a more positive customer rating. Based on this research question, please fill in the following:

Customer rating would be considered the (*response* \| explanatory) variable, and cups of coffee would be considered the (response \| *explanatory* variable). This study design is an (experience \| *observational study*).

**5 (multiple choice)** The gg in the name of the package ggplot2 stands for ...

**Options**

a.  Grammar of Graphics

b.  Grammar of Graphing

c.  Good Grammar

d.  Generate Graphics

**6 (True or False)** Please answer each *true or false question* below as it relates to the functionality.

a.  The `<-` assigns the value of the result from the operation on the right hand side to the object on the left hand side

b.  `geom_jitter` and `geom_point` will produce the same scatter plot.

**7 (Matching)** Connect the set of variables with a geom that will create an appropriate visualization.

::: columns
::: {.column width="70%"}
1.  Quantitative X & Quantitative Y

2.  Categorical X & Quantitative Y

3.  Categorical X
:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="20%"}
a.  geom_boxplot()

b.  geom_point()

c.  geom_bar()
:::
:::

The next two questions will use the `mtcars` data set in R. A key to the data set can be found below:

| Variable | Description                              |
|----------|------------------------------------------|
| mpg      | Miles/(US) gallon                        |
| cyl      | Number of cylinders                      |
| disp     | Displacement (cu.in.)                    |
| hp       | Gross horsepower                         |
| drat     | Rear axle ratio                          |
| wt       | Weight (1000 lbs)                        |
| qsec     | 1/4 mile time                            |
| vs       | Engine (0 = V-shaped, 1 = straight)      |
| am       | Transmission (0 = automatic, 1 = manual) |
| gear     | Number of forward gears                  |

**8 (multiple select)** Tidying your data means...

*a*. storing it in a consistent form that matches the semantics of the dataset with how it is stored

*b*. storing it where each column is a variable and each row is an observation

c.  cleaning your data so there are no missing observations

d.  making sure your data set has only quantitative values for analysis

**8 (Matching)** Code style: Below is code that does not follow the [Tidyverse style guide](https://style.tidyverse.org/). Pick the correction option that changes the code to adhere to the style guide.

```{r}
#| eval: false
ggplot(data=mpg,mapping=aes(x=drv,fill=class))+geom_bar() +scale_fill_viridis_d()
```

**Options**

a.  

```{r}
#| eval: false
ggplot(mpg, aes(x = drv, fill = class)) + 
  geom_bar() + 
  scale_fill_viridis_d()
```

b.  

```{r}
#| eval: false
ggplot(data=mpg, aes(x = drv, fill = class)) + 
  geom_bar() + scale_fill_viridis_d()
```

c.  

```{r}
#| eval: false
ggplot(mpg, aes(x = drv, fill = class))+ 
geom_bar()+ 
scale_fill_viridis_d()
```

**9 (Matching)** Reference the data set key above. Then, choose the selection that fills in the following `...` to make a scatterplot of cars' with `miles per gallon` on the x-axis and their \`weight below.

```{r}
#| eval: false
ggplot(mtcars) + 
  aes(x = ... , y = ...) + 
  geom_...()
```

**Options**

a.  

```{r}
#| eval: false
ggplot(mtcars) + 
  aes(x = mpg , y = wt) + 
  geom_point()
```

b.  

```{r}
#| eval: false
ggplot(mtcars) + 
  aes(x = wt , y = cyl) + 
  geom_point()
```

c.  

```{r}
#| eval: false
ggplot(mtcars) + 
  aes(x = mpg, y = wt) + 
  geom_scatter()
```

d.  

```{r}
#| eval: false
ggplot(mtcars) + 
  aes(x = wt , y = cyl) + 
  geom_scatter()
```

**10 (Fill in blank)** Should probably be moved up to question 1

Might also just not have a question like this.

Create side-by-side box plots of seller_rate on the y-axis, and clean_test on the x-axis with the boxes are colored by cond. Be sure to include appropriate labels.

```{webr-r}

ggplot(mario, 
       aes(x = ..., y = ..., color = ...)) +
  geom_...() +
  labs(
    title = "Return on investment vs. mario test result",
    x = "Detailed mario result",
    y = "Return-on-investment (gross / budget)",
    color = "mario\nresult"
    )
```

**Solution**

```{webr-r}

ggplot(mario, 
       aes(x = clean_test, y = seller_rate, color = cond)) +
  geom_boxplot() +
  labs(
    title = "Return on investment vs. mario test result",
    x = "Detailed mario result",
    y = "Return-on-investment (gross / budget)",
    color = "mario\nresult"
    )
```

# Questions for Mine

-- Is the **Your Turn** / **Demo** questions clear / how do we feel about how I've indicated this within each question in the document?

-- I've put a *Notes* text box after the demo questions. Should every question have a notes box?

-- The original AE for 199 had an open ended question at the end that read: "What other improvements could we make to this plot?" Would you like to include something like this? I did not include it (yet), and figure it may be a little to exploratory for a programming activity, but maybe we do actually want it.

-- This AE also had a second section that had:

```         
  - Create side-by-side box plots of seller_rate by clean_test where the 
  boxes are colored by cond.
  
  - What are those movies with very high returns on investment?
  
  - Expand on your plot from the previous step to zoom in on movies 
  with seller_rate < ___ to get a better view of how the medians across 
  the categories compare.
  
```

I'm under the impression that the last 2 questions are going to be beyond the scope of what Coursera students have learned, and did not include them. Thus, I also didn't include the first question as it may feel out of place (I pitch it above as an assessment question). Do we want to do something with these? Do we want to include this as given code for the last 2 questions as a lead in for `dplyr` / introduce the `coord_cartesian` function?
