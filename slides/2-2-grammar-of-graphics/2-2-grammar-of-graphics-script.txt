We're building our experience making plots with ggplot2. In this video, we'll overview the theory underlying it all. 

>>

The grammar of graphics.

>>

The grammar of graphics is a tool that enables us to describe the components of a graphic concisely
The ggplot2 package, which is part of tidyverse, implements the grammar of graphics in R

>>

With ggplot2, you can create a wide variety of plots layer-by-layer:

These layers are data, then aesthetics, then geoms, then facets, then statistics, then coordinates, and finally themes.

>>

Let's start with Layer 1: data.

>>

The data layer is the foundation of the plot that gives you the canvas to "paint" your data.

A neat feature of ggplot2 code is that each layer results in a valid plot, even if it's an "empty" plot like the one here.

>>

Layer 2 is aesthetics. We'll spend a bit of time on these.

>>

Aesthetics are characteristics of plotting characters that can be mapped to a specific variable in the data. For example, color, shape, size, or alpha, in other words, the transparency. There are many more aesthetic mappings, but we'll start with these.

>>

In this scatterplot, we can see the

>> color aesthetic mapped to species. Each level of species is represented by a different (automatically selected) color.        

>>

Here, shape is mapped to 

>> island                                                                   

>>

It's possible to map multiple aesthetics to the same variable, like species in this plot. We can see that this results in a combined legend.

>>

And here size is mapped to body mass. This effects the size of the points on the plot, which makes it very busy and difficult to read. Which means, just because you can, doesn't mean you should. It's up to you to decide whether an aesthetic mapping makes sense and results in a useful visualization. The best way to decide is to give it a try.

>>

And one more -- alpha. Here alpha, the transparency level, is mapped to flipper length. This is useful when you have lots of points being overplotted, like we have in this plot. It shows you where the density of the data is higher vs. lower.

>>

We've been using the term mapping. 

>> This is reseserved for when we are mapping an aesthetic to a variable in the data frame. So the values the aesthetic takes is determined by values in the data.

>> You can also just set an aesthetic to a value, just because you want to. For example, make all points red or make all of their sizes a bit bigger.

>>

So, mapping determines the size, alpha, etc. of points based on the values of a variable in the data and goes into the aes() function, and 

>> setting determines the size, alpha, etc. of points not based on the values of a variable in the data, and goes into geom function.

mapping vs. setting -- this will come up regularly in the course and when you're doing your own data visualizations.

>>

The next layer is geoms

>>

These are the visual representations of data points

>> they're short for geometric objects
>> geom functions are used to add geoms to a plot, and
>> Each geom adds a new layer to the plot, so you can stack them up!

>>

Here we have data represented with just points to make a scatterplot

>>

and here we've added another geom layer, where we're also representing the same data with a smooth curve that's fit to the data

>> and you'll learn about many more geoms soon!

>>

Next up is facets

>> 

What is a facet and why might we want it?

>> Facets are Smaller plots that each display different subsets of the data

>> they're also commonly referred to as small multiples

>> and they're Useful for exploring conditional relationships and large data

>> here is a faceted scatterplot, faceted by island across the columns and species across the rows

>>

To facet a plot

>> we add a facet layer. In this case we've used the facet_grid function to facet by two variables into a grid.

>>

species tilde island means species on rows, island on columns

>> and island tilde species means island on rows, species on columns

don't feel like you have to memorize this order. I often get them mixed up. just try it one way, and if you don't like it, try it the other way.

>>

to facet by a single variable, we instead use the facet_wrap function, which has a quirky syntax: just tilde species, so tilde followed by the variable you want to facet by

>> you have some control over how these facets are laid out, for example here we said we want them in a single column with the ncol argument, setting it to 1

>> 

layers 5 and 6 are statistics and coordinates

>> they're a bit more advanced so i won't say more about them now, but we'll get to them soon

>>

and layer 7 is themes

>> 

themes control the non-data elements of the plot

>> you can select from pre-defined themes with theme_something functions
>> or Take control of individual theme elements in the theme() function

>>

here we've added a dark theme to our plot with theme_dark

>>

and here we've changed the position of the legend to the bottom of the plot with the theme function

we'll highlight commonly used theme elements throughout the course as they become relevant. And remember, you can always access the function documentation with question mark theme to learn about all of the options available to you. exploring the documentation for all these functions is a great way to get practice making visualizations with ggplot2.

