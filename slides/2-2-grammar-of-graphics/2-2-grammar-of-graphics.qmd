---
title: "Grammar of graphics"
format: 
  revealjs:
    auto-stretch: true
---

```{r}
#| include: false

library(tidyverse)
library(palmerpenguins)
library(colorspace)

ggplot2::theme_set(ggplot2::theme_gray(base_size = 16))
```

```{r}
#| label: gg-setup
#| echo: false

gg_layers <- tribble(
  ~x,    ~y, ~layer,
  -1,     0, "Data",
   0,  0.75, "Data",
   1,     0, "Data",
   0, -0.75, "Data",
  -1,   0.5, "Aesthetics",
   0,  1.25, "Aesthetics",
   1,   0.5, "Aesthetics",
   0, -0.25, "Aesthetics",
  -1,     1, "Geoms",
   0,  1.75, "Geoms",
   1,     1, "Geoms",
   0,  0.25, "Geoms",
  -1,   1.5, "Facets",
   0,  2.25, "Facets",
   1,   1.5, "Facets",
   0,  0.75, "Facets",
  -1,     2, "Statistics",
   0,  2.75, "Statistics",
   1,     2, "Statistics",
   0,  1.25, "Statistics",
  -1,   2.5, "Coordinates",
   0,  3.25, "Coordinates",
   1,   2.5, "Coordinates",
   0,  1.75, "Coordinates",
  -1,     3, "Themes",
   0,  3.75, "Themes",
   1,     3, "Themes",
   0,  2.25, "Themes"
)

gg_colors <- tribble(
  ~layer,        ~fill,
  "Data",        "#000000",
  "Aesthetics",  "#0072B2",
  "Geoms",       "#56B4E9",
  "Facets",      "#009E73",
  "Statistics",  "#E69F00",
  "Coordinates", "#D55E00",
  "Themes",      "#CC79A7"
) |>
  rowid_to_column(var = "layer_no") |>
  mutate(color = darken(fill, 0.3))

gg <- gg_layers |> 
  left_join(gg_colors, by = join_by(layer)) |>
  mutate(layer = fct_reorder(layer, layer_no))

gg_diagram <- gg |>
  ggplot(aes(x = x, y = y, fill = layer)) +
  geom_polygon(alpha = 0.5, show.legend = FALSE) +
  geom_text(
    data = gg |> filter(x == 1) |> mutate(layer = fct_reorder(layer, layer_no)), 
    aes(label = layer, color = layer), 
    show.legend = FALSE,
    hjust = 0, nudge_x = 0.05,
    size = 11
  ) +
  coord_cartesian(clip = "off", xlim = c(-1, 3), ylim = c(-1, 4)) +
  theme_void() +
  theme(
    plot.background = element_rect(fill = "transparent", color = NA),
    panel.background = element_rect(fill = "transparent", color = NA)
  )
```

# Grammar of graphics {.section-break}

## Grammar of Graphics

::: columns
::: {.column width="40%"}
::: incremental
-   The grammar of graphics is a tool that enables us to concisely describe the components of a graphic
-   The **ggplot2** package, which is part of **tidyverse**, implements the grammar of graphics in R
:::
:::

::: {.column width="30%"}
![](images/grammar-of-graphics.png){fig-align="left" width="300"}
:::
:::

## Layers

With ggplot2, you can create a wide variety of plots layer-by-layer:

```{r}
#| label: gg
#| echo: false
#| fig-width: 7
#| fig-asp: 0.8
#| fig-align: center

gg_diagram +
  scale_fill_manual(values = gg_colors$fill) +
  scale_color_manual(values = gg_colors$color)
```

# Layer 1: Data {.section-break}

```{r dev = "png", dev.args = list(bg = "transparent")}
#| label: gg-data
#| echo: false
#| fig-width: 8
#| fig-asp: 0.9

gg_diagram +
  scale_fill_manual(values = gg_colors$fill) +
  scale_color_manual(values = c("white", rep("#5686b0", 6)))
```

## Data

Foundation of the plot that gives you the canvas on which you can "paint" your data:

```{r}
#| fig-width: 8

ggplot(penguins)
```

# Layer 2: Aesthetics {.section-break}

```{r dev = "png", dev.args = list(bg = "transparent")}
#| label: gg-aesthetics
#| echo: false
#| fig-width: 8
#| fig-asp: 0.9

gg_diagram +
  scale_fill_manual(values = gg_colors$fill) +
  scale_color_manual(values = c("#5686b0", "white", rep("#5686b0", 5)))
```

## Aesthetics

Characteristics of plotting characters that can be *mapped* to a specific variable in the data, e.g.:

-   `color`
-   `shape`
-   `size`
-   `alpha` (transparency)
-   ...

## Color

The `color` aesthetic mapped to `species`:

```{r}
#| output-location: column
#| warning: false
#| code-line-numbers: "|6"
#| fig-width: 7
ggplot(
  penguins,
  aes(
    x = bill_depth_mm, 
    y = bill_length_mm,
    color = species
    )
  ) +
  geom_point()
```

## Shape

The `shape` aesthetic mapped to `island`:

```{r}
#| output-location: column
#| warning: false
#| code-line-numbers: "7"
#| fig-width: 7
ggplot(
  penguins,
  aes(
    x = bill_depth_mm, 
    y = bill_length_mm,
    color = species,
    shape = island
    )
  ) +
  geom_point()
```

## Color and shape

The `color` and `shape` aesthetics mapped to `species`:

```{r}
#| output-location: column
#| warning: false
#| code-line-numbers: "6-7"
#| fig-width: 7
ggplot(
  penguins,
  aes(
    x = bill_depth_mm, 
    y = bill_length_mm,
    color = species,
    shape = species
    )
  ) +
  geom_point()
```

## Size

The `size` aesthetic mapped to `body_mass_g`:

```{r}
#| output-location: column
#| warning: false
#| code-line-numbers: "8"
#| fig-width: 7
ggplot(
  penguins,
  aes(
    x = bill_depth_mm, 
    y = bill_length_mm,
    color = species,
    shape = species,
    size = body_mass_g
    )
  ) +
  geom_point()
```

## Alpha

The `alpha` aesthetic mapped to `flipper_length_mm`:

```{r}
#| output-location: column
#| warning: false
#| code-line-numbers: "9"
#| fig-width: 7
ggplot(
  penguins,
  aes(
    x = bill_depth_mm, 
    y = bill_length_mm,
    color = species,
    shape = species,
    size = body_mass_g,
    alpha = flipper_length_mm
    )
  ) +
  geom_point()
```

## Mapping vs. setting {.smaller}

::: columns
::: {.column width="50%"}
### Mapping:

```{r}
#| label: mapping
#| warning: false
#| code-line-numbers: "|5-6"
#| fig-width: 7
#| fig-asp: 0.5
ggplot(
  penguins,
  aes(
    x = bill_depth_mm, y = bill_length_mm,
    color = species,
    size = body_mass_g
    )
  ) + 
  geom_point()
```
:::

::: {.column width="50%"}
### Setting:

```{r}
#| label: setting
#| warning: false
#| code-line-numbers: "|8-9"
#| fig-width: 7
#| fig-asp: 0.5
ggplot(
  penguins,
  aes(
    x = bill_depth_mm, y = bill_length_mm
    )
  ) + 
  geom_point(
    color = "red",
    size = 3
  )
```
:::
:::

## Mapping vs. setting

::: columns
::: {.column width="50%"}
### Mapping:

Determine the size, alpha, etc. of points based on the values of a variable in the data -- goes into `aes()`:

```{r}
#| ref.label: mapping
#| warning: false
#| echo: false
#| fig-width: 7
```
:::

::: {.column .fragment width="50%"}
### Setting:

Determine the size, alpha, etc. of points **not** based on the values of a variable in the data -- goes into `geom_*()`:

```{r}
#| ref.label: setting
#| warning: false
#| echo: false
#| fig-width: 7
```
:::
:::

# Layer 3: Geoms {.section-break}

```{r dev = "png", dev.args = list(bg = "transparent")}
#| label: gg-geoms
#| echo: false
#| fig-width: 8
#| fig-asp: 0.9

gg_diagram +
  scale_fill_manual(values = gg_colors$fill) +
  scale_color_manual(values = c(rep("#5686b0", 2), "white", rep("#5686b0", 4)))
```

## Geoms

Visual representations of data points:

-   Short for *geom*etric objects
-   `geom_*()` functions are used to add geoms to a plot
-   Each geom adds a layer to the plot

## `geom_point()` {.nostretch}

```{r}
#| warning: false
#| code-line-numbers: "5"
ggplot(
  penguins, 
  aes(x = bill_depth_mm, y = bill_length_mm)
  ) + 
  geom_point()
```

## `geom_smooth()` {.nostretch}

```{r}
#| warning: false
#| code-line-numbers: "6"
ggplot(
  penguins,
  aes(x = bill_depth_mm, y = bill_length_mm)
  ) + 
  geom_point() +
  geom_smooth()
```

. . .

::: hand
and many more soon...
:::

# Layer 4: Facets {.section-break}

```{r dev = "png", dev.args = list(bg = "transparent")}
#| label: gg-facets
#| echo: false
#| fig-width: 8
#| fig-asp: 0.9

gg_diagram +
  scale_fill_manual(values = gg_colors$fill) +
  scale_color_manual(values = c(rep("#5686b0", 3), "white", rep("#5686b0", 3)))
```

## Faceting - what and why {.nostretch}

-   Smaller plots that each display different subsets of the data
-   Also referred to as **small multiples**
-   Useful for exploring conditional relationships and large data

```{r}
#| label: facet-grid
#| echo: false
#| warning: false
ggplot(
  penguins, 
  aes(
    x = bill_depth_mm, 
    y = bill_length_mm)
  ) + 
  geom_point() +
  facet_grid(species ~ island)
```

## Faceting - how

```{r}
#| output-location: column
#| warning: false
#| fig-width: 7
ggplot(
  penguins, 
  aes(
    x = bill_depth_mm, 
    y = bill_length_mm)
  ) + 
  geom_point()
```

## Faceting - how

```{r}
#| ref.label: facet-grid
#| output-location: column
#| warning: false
#| code-line-numbers: "8"
#| fig-width: 7
```

## Faceting by two variables

::: columns
::: {.column width="50%"}
`species` on rows, `island` on columns:

```{r}
#| warning: false
#| code-line-numbers: "3"
#| fig-width: 7
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  facet_grid(species ~ island)
```
:::

::: {.column .fragment width="50%"}
`island` on rows, `species` on columns:

```{r}
#| warning: false
#| code-line-numbers: "3"
#| fig-width: 7
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  facet_grid(island ~ species)
```
:::
:::

## Faceting by one variable

::: columns
::: {.column width="50%"}
```{r}
#| warning: false
#| code-line-numbers: "3"
#| fig-width: 7
#| fig-asp: 0.33
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  facet_wrap(~ species)
```
:::

::: {.column .fragment width="50%"}
```{r}
#| warning: false
#| code-line-numbers: "3"
#| fig-width: 5
#| fig-asp: 0.9
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  facet_wrap(~ species, ncol = 1)
```
:::
:::

# Layer 5 and 6:<br>Statistics and Coordinates {.section-break}

::: columns
::: {.column width="50%"}
```{r dev = "png", dev.args = list(bg = "transparent")}
#| label: gg-stats-coords
#| echo: false
#| fig-width: 8
#| fig-asp: 0.9

gg_diagram +
  scale_fill_manual(values = gg_colors$fill) +
  scale_color_manual(values = c(rep("#5686b0", 4), "white", "white", rep("#5686b0", 1)))
```
:::

::: {.column .fragment width="20%"}
::: hand-white
more on these later...
:::
:::
:::

# Layer 7: Themes {.section-break}

```{r dev = "png", dev.args = list(bg = "transparent")}
#| label: gg-themes
#| echo: false
#| fig-width: 8
#| fig-asp: 0.9

gg_diagram +
  scale_fill_manual(values = gg_colors$fill) +
  scale_color_manual(values = c(rep("#5686b0", 6), "white"))
```

## Themes

Control the non-data elements of the plot:

-   Select from pre-defined themes with `theme_*()` functions
-   Take control of individual theme elements in the `theme()` function

## `theme_dark()` {.nostretch}

```{r}
#| fig-show: hide
#| warning: false
#| code-line-numbers: "3"
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  theme_dark()
```

```{r}
#| echo: false
#| warning: false
#| fig-width: 8
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + 
  geom_point() +
  theme_dark(base_size = 16)
```

## `theme()` {.nostretch}

```{r}
#| warning: false
#| code-line-numbers: "3"
#| fig-width: 8
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, color = species)) + 
  geom_point() +
  theme(legend.position = "bottom")
```

. . .

::: hand
and many more throughout the course...
:::
