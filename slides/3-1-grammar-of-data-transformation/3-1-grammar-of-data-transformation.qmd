---
title: "Grammar of data transformation"
format: 
  revealjs:
    auto-stretch: true
---

```{r}
#| include: false

library(tidyverse)
library(nycflights13)

ggplot2::theme_set(ggplot2::theme_gray(base_size = 16))
```

# Data frames and `tibble`s

## NYC Flights

-   To demonstrate data wrangling we will use `flights`, a tibble in the **nycflights13** R package.

-   The data set includes characteristics of all flights departing from New York City (JFK, LGA, EWR) in 2013.

```{r}
#| label: load-packages
#| message: false

library(tidyverse)
library(nycflights13)
```

## `flights` -- dimensions

-   Number of rows:

```{r}
nrow(flights)
```

. . .

-   Number of columns:

```{r}
ncol(flights)
```

## `flights` -- first look with `glimpse()`

```{r}
#| label: glimpse-data

glimpse(flights)
```

## `flights` -- first look with `names()`

```{r}
#| label: column-names

names(flights)
```

## `flights` -- first look with `head()`

```{r}
#| label: explore-data

head(flights)
```

## `tibble` vs. data frame

::: incremental
-   **tibble**: an opinionated version of the `R` data frame
-   All tibbles are data frames, but not all data frames are tibbles!
-   Two main differences between a tibble and a data frame:
    -   Printing
    -   Stricter subsetting
:::

## Printing - `tibble`s

Display first 10 rows and all of the columns that fit on the screen will display, along with the type of each column.

```{r}
#| label: tibble-print

flights
```

## Printing - `data.frame`s

(Attempt to) display all of the data, or die (crash) trying (if the dataset is too large)!

```{r}
#| label: data-frame-print

cars
```

## Stricter subsetting -- `tibble`s

Warning + `NULL` if variable not found.

```{r}
#| label: tibble-subset

flights$apple
```

## Stricter subsetting -- `data.frame`s

Only `NULL` if variable not found.

```{r}
#| label: data-frame-subset

cars$apple
```

# Data wrangling with `dplyr`

## dplyr

## dplyr $\in$ tidyverse

::: columns
::: {.column width="40%"}
-   **dplyr** is tidyverse's primary package for data wrangling
-   Package website: [dplyr.tidyverse.org](https://dplyr.tidyverse.org)
:::

::: {.column width="30%"}
![](images/dplyr-part-of-tidyverse.png){fig-align="left" width="400"}
:::
:::

## Row operations

-   `slice()`: chooses rows based on location
-   `filter()`:chooses rows based on column values
-   `arrange()`: changes the order of the rows
-   `sample_n()`: take a random subset of the rows

## `slice()`

Display the first five rows of `flights`:

```{r}
#| label: slice
#| code-line-numbers: "|1|2"

flights |>      # <1>   
  slice(1:5)    # <2>
```

1.  Take the `flights` data frame, **and then**,
2.  Slice its first five rows

## `filter()`

Filter for flights to RDU in `flights`:

```{r}
#| label: filter
#| code-line-numbers: "|1|2"

flights |>                 # <1>   
  filter(dest == "RDU")    # <2>
```

1.  Take the `flights` data frame, **and then**,
2.  Filter for rows where `dest` *is equal to* `RDU`

## The pipe

::: incremental
-   The **pipe**, `|>`, is an operator (a tool) for passing information from one process to another.

-   Use `|>` mainly in data pipelines to pass the output of the previous line of code as the first input of the next line of code.

-   When reading code "in English", say "and then" whenever you see a pipe.
:::

## Delayed flights to RDU

::: task
Which airline is the most delayed, on average, arriving in RDU from a New York City airport?
:::

. . .

**Goal:**

```{r}
#| echo: false
#| ref.label: pipe-5
```

## The pipe, in action

```{r}
#| label: pipe-1

flights # <1>
```

1.  Take the flights data frame

## The pipe, in action

```{r}
#| label: pipe-2

flights |>               # <1>
  filter(dest == "RDU")  # <2>
```

1.  Take the flights data frame,
2.  **and then** filter for flights going to RDU

## The pipe, in action

```{r}
#| label: pipe-3

flights |>                  # <1>
  filter(dest == "RDU") |>  # <2>
  group_by(carrier)         # <3>
```

1.  Take the flights data frame,
2.  **and then** filter for flights going to RDU,
3.  **and then** group by carrier

## The pipe, in action

```{r}
#| label: pipe-4

flights |>                  # <1>
  filter(dest == "RDU") |>  # <2>
  group_by(carrier) |>      # <3>
  summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE)) # <4>
```

1.  Take the flights data frame,
2.  **and then** filter for flights going to RDU,
3.  **and then** group by carrier,
4.  **and then** calculate the mean arrival delay for each carrier

## The pipe, in action

```{r}
#| label: pipe-5

flights |>                  # <1>
  filter(dest == "RDU") |>  # <2>
  group_by(carrier) |>      # <3>
  summarize(mean_arr_delay = mean(arr_delay, na.rm = TRUE)) |> # <4>
  arrange(desc(mean_arr_delay)) # <5>
```

1.  Take the flights data frame,
2.  **and then** filter for flights going to RDU,
3.  **and then** group by carrier,
4.  **and then** calculate the mean arrival delay for each carrier,
5.  **and then** arrange in descending order of mean arrival delay.

## Column operations

::: incremental
-   `select()`: changes whether or not a column is included.
-   `rename()`: changes the name of columns.
-   `mutate()`: changes the values of columns and creates new columns.
:::

## Groups of rows

::: incremental
-   `summarize()`: collapses a group into a single row.
-   `count()`: count unique values of one or more variables.
-   `group_by()`: perform calculations separately for each value of a variable
:::
